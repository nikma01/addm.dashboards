<?xml version="1.0"?>
<reports version="2.0">
    <!--
# Default reports definition file
# =====================================
# $Revision: 32440 $
-->
    <!--
    #########################################################################

        "FOUNDATION DEPLOYMENT" CHANNEL

    #########################################################################
    -->

    <report name="CMDB.Report.FailedHosts">
      <title>Hosts that failed last CMDB sync</title>
      <description>Shows Hosts that were not successfully synchronized with the CMDB on the most recent attempt</description>
      <kind>Host</kind>
      <where>
        last_cmdb_sync_failure and
        (last_cmdb_sync_failure > (last_cmdb_sync_success or 0))
      </where>
      <show>
        summary,
        last_cmdb_sync_success,
        last_cmdb_sync_failure
      </show>
    </report>

    <report name="CMDB.Report.FailedNetworkDevices">
      <title>Network Devices that failed last CMDB sync</title>
      <description>Shows Network Devices that were not successfully synchronized with the CMDB on the most recent attempt</description>
      <kind>NetworkDevice</kind>
      <where>
        last_cmdb_sync_failure and
        (last_cmdb_sync_failure > (last_cmdb_sync_success or 0))
      </where>
      <show>
        summary,
        last_cmdb_sync_success,
        last_cmdb_sync_failure
      </show>
    </report>

    <report name="CMDB.Report.FailedMFParts">
      <title>MFParts that failed last CMDB sync</title>
      <description>Shows MFParts that were not successfully synchronized with the CMDB on the most recent attempt</description>
      <kind>MFPart</kind>
      <where>
        last_cmdb_sync_failure and
        (last_cmdb_sync_failure > (last_cmdb_sync_success or 0))
      </where>
      <show>
        summary,
        last_cmdb_sync_success,
        last_cmdb_sync_failure
      </show>
    </report>

    <report name="DC.Report.ViewApplications">
        <title>Application Data Completeness</title>
        <description>Show Application Data Completeness</description>
        <kind>BusinessApplicationInstance</kind>
        <order-by>name</order-by>
        <show>
            dq_band(#) AS "_|DC|_",
            dq_summary(#) AS "_|DC Summary|_",
            SUMMARY
        </show>
    </report>

    <report name="DC.Report.ViewHosts">
        <title>Host Data Completeness</title>
        <description>Show Host Data Completeness</description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            dq_band(#) AS "_|DC|_",
            dq_summary(#) AS "_|DC Summary|_",
            SUMMARY
        </show>
    </report>

    <report name="DC.Report.ViewSoftwareInstances">
        <title>Software Instance Data Completeness</title>
        <description>Show Software Instance Data Completeness</description>
        <kind>SoftwareInstance</kind>
        <order-by>name</order-by>
        <show>
            dq_band(#) AS "_|DC|_",
            dq_summary(#) AS "_|DC Summary|_",
            SUMMARY
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.FoundationDeployment">
        <title>Atrium Discovery Deployment</title>
        <description>Atrium Discovery Deployment</description>
        <report>CMDB.Report.FailedHosts</report>
        <report>CMDB.Report.FailedNetworkDevices</report>
        <report>CMDB.Report.FailedMFParts</report>
        <report>DC.Report.ViewApplications</report>
        <report>DC.Report.ViewSoftwareInstances</report>
        <report>DC.Report.ViewHosts</report>
    </report-channel>

    <!--
    #########################################################################

        "OPERATING SYSTEMS" CHANNEL

    #########################################################################
    -->

    <chart name="Infrastructure.Chart.OSClassificationPie" default="pie">
        <title>Host OS Classification</title>
        <description>Shows a count of Hosts for each OS Classification</description>
        <kind>Host</kind>
        <order-by>os_class</order-by>
        <split>os_class AS "_|OS Class|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="Infrastructure.Chart.OSTypeDistributionPie" default="pie">
        <title>Host OS Distribution</title>
        <description>Shows a count of Hosts for each OS Type</description>
        <kind>Host</kind>
        <order-by>os_type</order-by>
        <split>os_type AS "_|OS Type|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="Infrastructure.Chart.UNIXClassificationPie" default="pie">
        <title>UNIX Classification</title>
        <description>Shows a count of Hosts for each UNIX OS</description>
        <kind>Host</kind>
        <where>os_class = "UNIX"</where>
        <order-by>os_type</order-by>
        <split>os_type AS "_|OS Type|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="Infrastructure.Chart.WindowsVersionsPie" default="pie">
        <title>Windows Versions</title>
        <description>Shows a count of Hosts for each Windows Version</description>
        <kind>Host</kind>
        <where>os_type = "Windows"</where>
        <order-by>os_version</order-by>
        <split>os_version AS "_|OS Version|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.OperatingSystems">
        <title>Operating Systems</title>
        <description>Operating System Reports and Charts</description>
        <chart>Infrastructure.Chart.OSClassificationPie</chart>
        <chart>Infrastructure.Chart.OSTypeDistributionPie</chart>
        <chart>Infrastructure.Chart.UNIXClassificationPie</chart>
        <chart>Infrastructure.Chart.WindowsVersionsPie</chart>
    </report-channel>

    <!--
    #########################################################################

        "NETWORK POLICIES" CHANNEL (Now shown on Infrastructure Home)

    #########################################################################
    -->

    <report name="Infrastructure.Report.NetworkMismatchSummary">
        <title>Host/Network Device Mismatches</title>
        <description>Shows Host to Network Device configuration mismatches</description>
        <kind>NetworkInterface</kind>
        <where>
               #NetworkInterface:NetworkLink.speed_ok &lt;&gt; 1
            OR #NetworkInterface:NetworkLink.duplex_ok &lt;&gt; 1
            OR #NetworkInterface:NetworkLink.negotiation_ok &lt;&gt; 1
        </where>
        <order-by>#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host.name</order-by>
        <show>
            <!-- Changing the SHOW clause requires changing SWMMResults in ui.wweb.services.uiresults -->
            #NetworkInterface:NetworkLink.speed_ok AS "Speed OK",
            #NetworkInterface:NetworkLink.duplex_ok AS "Duplex OK",
            #NetworkInterface:NetworkLink.negotiation_ok AS "Negotiation OK",
            #InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host.name as "Host Name",
            #NetworkInterface:NetworkLink:PortInterface:PortInterface.#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:NetworkDevice.name as "Network Device Name",
            name as "Host Interface",
            #NetworkInterface:NetworkLink:PortInterface:PortInterface.port as "Port",
            speed as "Host Speed",
            #NetworkInterface:NetworkLink:PortInterface:PortInterface.speed as "Network Device Speed",
            duplex as "Host Duplex",
            #NetworkInterface:NetworkLink:PortInterface:PortInterface.duplex as "Network Device Duplex",
            negotiation as "Host Negotiation",
            #NetworkInterface:NetworkLink:PortInterface:PortInterface.negotiation as "Network Device Negotiation"
        </show>
        <url>NetworkMismatchSummaryReport</url>
    </report>

    <chart name="Infrastructure.Chart.IPAddressDistribution" default="pie">
        <title>Host IP Address Distribution</title>
        <description>Shows distribution of IP Addresses per Host</description>
        <kind>Host</kind>
        <split>
            bin(NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface),
                [1, 2, 3, 5, 10, 30]) AS "_|Number of IPs|_"
        </split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Infrastructure.Channel.NetworkPolicy">
        <title>Network Policies</title>
        <description>Shows a list of Network Infrastructure Reports</description>
        <report>Infrastructure.Report.NetworkMismatchSummary</report>
        <chart>Infrastructure.Chart.IPAddressDistribution</chart>
    </report-channel>

    <!--
    #########################################################################

        "VIRTUALIZATION" CHANNEL - Includes virtualisation and partitioned

    #########################################################################
    -->

    <chart name="Virtualization.Charts.VMwareOSClassificationPie" default="pie">
        <title>VMware Guest OS Classification</title>
        <description>Shows a chart of OS Classification of VMware Guests</description>
        <kind>Host</kind>
        <where>model = "VMware Virtual Platform"</where>
        <order-by>name</order-by>
        <split>os_class AS "_|OS Class|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="Virtualization.Charts.VMwareOSTypeDistributionPie" default="pie">
        <title>VMware Guest OS Distribution</title>
        <description>Shows a chart of OS Type distribution of VMware Guests</description>
        <kind>Host</kind>
        <where>model = "VMware Virtual Platform"</where>
        <order-by>name</order-by>
        <split>os_type AS "_|OS Type|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <report name="Virtualization.Reports.VMwareGuestHost">
        <title>Hosts in VMware VMs</title>
        <description>Shows a report of the contained VMware Guests</description>
        <kind>Host</kind>
        <where>model = "VMware Virtual Platform"</where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.version OR '') AS '_|VMware Version|_',
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Supporting Host',
            ( #ContainedHost:HostContainment:HostContainer:SoftwareInstance.vm_poweron_startup OR
                #ContainedHost:HostContainment:HostContainer:SoftwareInstance.poweron_startup OR '') AS 'Poweron Startup'
        </show>
    </report>

    <report name="Virtualization.Reports.VMwarePhysicalHost">
        <title>Hosts supporting VMware VMs</title>
        <description>Shows a report of the physical Hosts containing running VMware Guests</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'VMware Virtual Machine'
            OR type = 'VMware ESX Server Daemon'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      WHERE vm_type = 'VMware Virtual Machine') AS "Running VM Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked Guest Host Count|_"
        </show>
    </report>

    <report name="Virtualization.Reports.VMwareESXVuln">
        <title>ESX/ESXi Hosts where API access needs patching</title>
        <description>Shows a report of the ESX/ESXi Hosts that have a connection leak in their API and need updating if API based discovery is required</description>
        <kind>Host</kind>
        <where>
            #InferredElement:Inference:Primary:DeviceInfo.__cve_2011_1785
        </where>
        <order-by>os_type, name</order-by>
        <show>
            name,
            os_type,
            os_version,
            os_build,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint
        </show>
    </report>

    <report name="Virtualization.Reports.SolarisZone">
        <title>Hosts in Solaris Zones</title>
        <description>Shows a report of the contained Solaris Zones</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Solaris Zone Container'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name,name</order-by>
        <show>
            name,
            zonename,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Global Zone Name'
        </show>
    </report>

    <report name="Virtualization.Reports.SolarisGlobalZone">
        <title>Hosts supporting Solaris Zones</title>
        <description>
            Shows a report of the physical Hosts containing Solaris Zones
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Solaris Zone Container'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'Solaris Zone Container') AS "Running Zone Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked Zone Host Count|_"
        </show>
    </report>

    <report name="Virtualization.Reports.AIXWPAR">
        <title>Hosts in AIX WPAR VMs</title>
        <description>Shows a report of the contained AIX WPARs</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'AIX WPAR Container'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host</where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            wparid AS 'WPAR id',
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Containing LPAR'
        </show>
    </report>

    <report name="Virtualization.Reports.AIXWPARLPAR">
        <title>AIX LPARs supporting WPAR VMs</title>
        <description>Shows a report of the LPARs containing WPARs</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'AIX WPAR Container'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            lpar_name AS 'LPAR Name',
            lpar_partition_number AS 'LPAR Partition Number',
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'AIX WPAR Container') AS "Running WPAR Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked WPAR Host Count|_"
        </show>
    </report>

    <chart name="Virtualization.Charts.LPAROSClassificationPie" default="pie">
        <title>Power LPAR/WPAR OS Classification</title>
        <description>Shows a chart of OS Classification of IBM POWER LPAR/WPAR Hosts</description>
        <kind>Host</kind>
        <where>#ContainedHost:HostContainment:HostContainer:SoftwareInstance.vm_type = 'AIX WPAR Container' OR
                #ContainedHost:HostContainment:HostContainer:HostContainer.type = 'IBM POWER System'</where>
        <order-by>name</order-by>
        <split>os_class AS "_|OS Class|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="Virtualization.Charts.LPAROSTypeDistributionPie" default="pie">
        <title>Power LPAR/WPAR OS Distribution</title>
        <description>Shows a chart of OS Type distribution of IBM POWER LPAR/WPAR Hosts</description>
        <kind>Host</kind>
        <where>#ContainedHost:HostContainment:HostContainer:SoftwareInstance.vm_type = 'AIX WPAR Container' OR
                #ContainedHost:HostContainment:HostContainer:HostContainer.type = 'IBM POWER System'</where>
        <order-by>name</order-by>
        <split>os_type AS "_|OS Type|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <report name="Virtualization.Reports.MSHyperV">
        <title>Hosts in Microsoft Hyper-V VMs</title>
        <description>Shows a report of the contained Microsoft Hyper-V hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Microsoft Hyper-V Virtual Machine'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Supporting Host',
            ( #ContainedHost:HostContainment:HostContainer:SoftwareInstance.vm_poweron_startup OR
                #ContainedHost:HostContainment:HostContainer:SoftwareInstance.poweron_startup OR '') AS 'Poweron Startup'
        </show>
    </report>

    <report name="Virtualization.Reports.MSHyperVHost">
        <title>Hosts supporting Microsoft Hyper-V VMs</title>
        <description>Shows a report of the Hosts containing Hyper-V hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Microsoft Hyper-V Virtual Machine'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'Microsoft Hyper-V Virtual Machine') AS "Running VM Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked Hyper-V Host Count|_"
        </show>
    </report>

    <report name="Virtualization.Reports.XenDomain">
        <title>Hosts in Xen VMs</title>
        <description>Shows a report of the contained Xen Domain hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'XenServer Domain'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Supporting Host'
        </show>
    </report>

    <report name="Virtualization.Reports.XenDomain0">
        <title>Hosts supporting Xen VMs</title>
        <description>Shows a report of the Hosts containing Xen Domain hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'XenServer Domain'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'XenServer Domain') AS "Running Xen Domain Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked Xen Domain Host Count|_"
        </show>
    </report>


        <report name="Virtualization.Reports.OracleVMDomain">
        <title>Hosts in OracleVM VMs</title>
        <description>Shows a report of the contained OracleVM Domain hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Oracle VM Server'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Supporting Host'
        </show>
    </report>

    <report name="Virtualization.Reports.OracleVMDomain0">
        <title>Hosts supporting OracleVM VMs</title>
        <description>Shows a report of the Hosts containing OracleVM Domain hosts</description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'Oracle VM Server'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'Oracle VM Server') AS "Running OracleVM Domain Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked OracleVM Domain Host Count|_"
        </show>
    </report>

    <report name="Virtualization.Reports.LinkedVirtualFromPhysical">
        <title>Containing Hosts with Virtual Machines</title>
        <description>
            Shows a report of Hosts that are running VMs and how many
            have been resolved to Hosts
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type IS DEFINED
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
            WITH value(NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance WHERE vm_type IS DEFINED)) AS vm_count,
            value(NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                            TRAVERSE HostContainer:HostContainment:ContainedHost:Host)) AS guest_count
        </where>
        <order-by>@guest_count*100/@vm_count DESC</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            @vm_count AS "Running VM Count",
            @guest_count AS "Linked Guest Host Count"
        </show>
    </report>


    <report name="Virtualization.Reports.xVMGuestHost">
        <title>Hosts in Sun xVM VirtualBox VMs</title>
        <description>Shows a report of the contained Sun xVM VirtualBox Guests</description>
        <kind>Host</kind>
        <where>model = 'VirtualBox'</where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            nodeLink(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host,
                     (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:Host.name OR '') )
                      AS 'Supporting Host'
        </show>
    </report>

    <report name="Virtualization.Reports.xVMPhysicalHost">
        <title>Hosts supporting Sun xVM VirtualBox VMs</title>
        <description>
            Shows a report of the physical Hosts containing running Sun xVM VirtualBox Guests
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type = 'xVM VirtualBox Virtual Machine'
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                         WHERE vm_type = 'xVM VirtualBox Virtual Machine') AS "Running VM Count",
            NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:Host) AS "_|Linked Guest Host Count|_"
        </show>
    </report>

    <report name="Virtualization.Reports.ContainedHosts">
        <title>All Contained Hosts</title>
        <description>
            Shows a report of Hosts that are Virtual (e.g. VMware, Solaris Zones),
            a member of a Cluster (e.g. Veritas Cluster Server) or a member of a
            Host Container (e.g. Sun Enterprise 15K Series)
        </description>
        <flags>no_segment</flags>
        <kind>Host, MFPart</kind>
        <where>
            virtual OR partition AND
            name IS DEFINED
            TRAVERSE ContainedHost:HostContainment:HostContainer:
            TRAVERSE HostContainer:HostContainment:ContainedHost:
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #ContainedHost:HostContainment:HostContainer:.name AS "Container Name",
            ( ( (virtual AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'VM in a Cluster') OR (virtual AND 'VM') )
             OR
             (partition AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'Partition in a Cluster') OR (partition AND 'Partition')
             OR
             (#ContainedHost:HostContainment:HostContainer:Cluster AND 'Cluster Node') ) AS "Containment Type",
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint
        </show>
    </report>

    <report name="Virtualization.Reports.VirtualHosts">
        <title>All Virtual Hosts</title>
        <description>
            Shows a report of Hosts that are Virtual (e.g. VMware, Solaris Zones)
        </description>
        <flags>no_segment</flags>
        <kind>Host, MFPart</kind>
        <where>
            virtual AND
            name IS DEFINED
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #ContainedHost:HostContainment:HostContainer:.name AS "Container Name",
            ( ( (virtual AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'VM in a Cluster') OR (virtual AND 'VM') )
             OR
             (partition AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'Partition in a Cluster') OR (partition AND 'Partition')
             OR
             (#ContainedHost:HostContainment:HostContainer:Cluster AND 'Cluster Node') ) AS "Containment Type",
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint
        </show>
    </report>

    <report name="Virtualization.Reports.PartitionHosts">
        <title>All Partition Hosts</title>
        <description>
            Shows a report of Hosts that are Partitions (e.g. Sun Enterprise or IBM POWER)
        </description>
        <flags>no_segment</flags>
        <kind>Host, MFPart</kind>
        <where>
            partition AND
            name IS DEFINED
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #ContainedHost:HostContainment:HostContainer:.name AS "Container Name",
            ( ( (virtual AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'VM in a Cluster') OR (virtual AND 'VM') )
             OR
             (partition AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'Partition in a Cluster') OR (partition AND 'Partition')
             OR
             (#ContainedHost:HostContainment:HostContainer:Cluster AND 'Cluster Node') ) AS "Containment Type",
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint
        </show>
    </report>

    <report name="Virtualization.Reports.ClusterHosts">
        <title>All Cluster Hosts</title>
        <description>
            Shows a report of Hosts that are in Clusters (e.g. Veritas Cluster Server)
        </description>
        <flags>no_segment</flags>
        <kind>Host, MFPart</kind>
        <where>
            #ContainedHost:HostContainment:HostContainer:Cluster AND
            name IS DEFINED
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #ContainedHost:HostContainment:HostContainer:.name AS "Container Name",
            ( ( (virtual AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'VM in a Cluster') OR (virtual AND 'VM') )
             OR
             (partition AND #ContainedHost:HostContainment:HostContainer:Cluster AND 'Partition in a Cluster') OR (partition AND 'Partition')
             OR
             (#ContainedHost:HostContainment:HostContainer:Cluster AND 'Cluster Node') ) AS "Containment Type",
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint
        </show>
    </report>

    <report name="Virtualization.Reports.VirtualToPhysical">
        <title>Virtual Hosts relying on Containing Hosts</title>
        <description>
            Shows a report of Hosts that are Virtual Machines (e.g. VMware, Solaris
            Zones, HyperV) and their corresponding Containing Hosts
        </description>
        <kind>Host</kind>
        <where>
            name IS DEFINED
            TRAVERSE ContainedHost:HostContainment:HostContainer:SoftwareInstance
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>name</order-by>
        <show>
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.type AS 'Virtualization Technology',
            name AS 'Virtual Host',
            os AS 'Virtual Host OS',
            #InferredElement:Inference:Primary:DeviceInfo.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.discovery_starttime AS 'Virtual Host Scanned',
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.
                #RunningSoftware:HostedSoftware:Host:Host.name AS 'Containing Host',
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.
                #RunningSoftware:HostedSoftware:Host:Host.os AS 'Containing Host OS',
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.
                #RunningSoftware:HostedSoftware:Host:Host.
                #InferredElement:Inference:Primary:DeviceInfo.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.discovery_starttime AS 'Containing Host Scanned'
        </show>
    </report>

    <report name="Virtualization.Reports.UnLinkedVirtualFromPhysical">
        <title>Containing Hosts with unresolved Virtual Machines</title>
        <description>
            Shows a report of Hosts that are running more Virtual Machines than
            have been resolved to Hosts
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type IS DEFINED
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
            WITH value(NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance WHERE vm_type IS DEFINED)) AS vm_count,
            value(NODECOUNT(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                            TRAVERSE HostContainer:HostContainment:ContainedHost:Host)) AS guest_count
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            @vm_count AS "Running VM Count",
            @guest_count AS "Linked Guest Host Count",
            progressBar(@guest_count*100/@vm_count) AS "Discovery Coverage"
        </show>
    </report>

    <report name="Virtualization.Reports.UnLinkedVirtualFromVirtual">
        <title>Virtual Machines unresolved to Containing Hosts</title>
        <description>
            Shows a report of Hosts that appear to be running in Virtual
            Machines but have not been resolved to containing Hosts
        </description>
        <kind>Host</kind>
        <where>
                (   vendor = 'Xen'
                 OR model = 'VirtualBox'
                 OR (wparid IS DEFINED AND NOT wparid = 0)
                 OR (zonename IS DEFINED AND NOT zonename = 'global')
                 OR (model = 'Virtual Machine' AND vendor = 'Microsoft Corporation')
                 OR serial matches '^VMware-'
                 OR virtual)
            AND NODECOUNT(TRAVERSE ContainedHost:HostContainment:HostContainer:SoftwareInstance) = 0
        </where>
        <order-by>name</order-by>
        <show>
            name,
            os,
            vendor,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint as "Scanned via",
            (   (vendor = 'Xen' AND 'Xen Domain')
             OR (model = 'VirtualBox' AND 'SUN xVM VirtualBox')
             OR ((wparid IS DEFINED AND NOT wparid = 0) AND 'AIX PAR')
             OR ((zonename IS DEFINED AND NOT zonename = 'global') AND 'SUN Zones')
             OR ((model = 'Virtual Machine' AND vendor = 'Microsoft Corporation') AND 'Microsoft Hyper-V')
             OR (serial matches '^VMware-' AND 'VMware')
             OR 'Other') AS "Inferred VM Technology"
        </show>
    </report>

    <!-- Parition reports -->

    <report name="Virtualization.Reports.SolarisLDOMS">
        <title>Solaris LDOMs</title>
        <description>
            Shows a report of Hosts that are Solaris Logical Domains
        </description>
        <kind>Host</kind>
        <where>
            partition AND os_type='Solaris'
        </where>
        <order-by>#ContainedHost:HostContainment:HostContainer:HostContainer.name,
                  nodecount(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance WHERE type='Sun Solaris Logical Domain Manager') DESC</order-by>
        <show>
            summary,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint,
            #ContainedHost:HostContainment:HostContainer:HostContainer.name AS 'Frame Name',
            #ContainedHost:HostContainment:HostContainer:HostContainer.model AS 'Frame Model',
            nodecount(TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance WHERE type='Sun Solaris Logical Domain Manager') AS 'Domain Manager'
        </show>
    </report>

    <report name="Virtualization.Reports.IBMPOWERLPAR">
        <title>IBM POWER LPARs</title>
        <description>
            Shows a report of Hosts that are LPARS on IBM POWER systems. Includes AIX, Linux and VIO Hosts.
        </description>
        <kind>HostContainer</kind>
        <where>
            type='IBM POWER System'
            TRAVERSE HostContainer:HostContainment:ContainedHost:Host
        </where>
        <order-by>#ContainedHost:HostContainment:HostContainer:HostContainer.name, host_type, lpar_partition_number</order-by>
        <show>
            name, os, host_type, vendor, lpar_partition_number,
            #InferredElement:Inference:Associate:DiscoveryAccess.endpoint,
            nodeLink(#ContainedHost:HostContainment:HostContainer:HostContainer,
                #ContainedHost:HostContainment:HostContainer:HostContainer.name) AS 'Frame Name',
            nodeLink(#ContainedHost:HostContainment:HostContainer:HostContainer,
                #ContainedHost:HostContainment:HostContainer:HostContainer.model) AS 'Frame Model',
            nodeLink(#ContainedHost:HostContainment:HostContainer:HostContainer,
                #ContainedHost:HostContainment:HostContainer:HostContainer.serial) AS 'Frame Serial',
            nodeLink(#ContainedHost:HostContainment:HostContainer:HostContainer.#ManagedElement:Management:Manager:SoftwareInstance,
                #ContainedHost:HostContainment:HostContainer:HostContainer.#ManagedElement:Management:Manager:SoftwareInstance.name) AS 'Managed By'
        </show>
    </report>

    <report name="Virtualization.Reports.IBMPOWERFRAME">
        <title>IBM POWER Frames</title>
        <description>
            Shows a report of HostContainers that are IBM POWER system frames.
        </description>
        <kind>HostContainer</kind>
        <where>
            type='IBM POWER System'
        </where>
        <order-by>#ContainedHost:HostContainment:HostContainer:HostContainer.name, host_type, lpar_partition_number</order-by>
        <show>
            name, model, serial,
            nodeLink(#ManagedElement:Management:Manager:SoftwareInstance, #ManagedElement:Management:Manager:SoftwareInstance.name) AS 'Managed By'
        </show>
    </report>

    <report name="Virtualization.Reports.IBMPOWERHMC">
        <title>IBM POWER HMCs</title>
        <description>
            Shows a report of Hosts that are IBM POWER HMCs and what systems they are configured to manage
        </description>
        <kind>Host</kind>
        <where>
            os_type='POWER HMC'
        </where>
        <show>
            name, os_type, os_version,
            #Host:HostedSoftware:RunningSoftware:SoftwareInstance.#ElementWithDetail:Detail:Detail:Detail.name AS 'Managed Systems'
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.Virtualization">
        <title>Virtualization</title>
        <description>Virtualization Reports and Charts</description>
        <report>Virtualization.Reports.VirtualToPhysical</report>
        <report indent="true">Virtualization.Reports.VMwareGuestHost</report>
        <report indent="true">Virtualization.Reports.VMwarePhysicalHost</report>
        <report indent="true">Virtualization.Reports.SolarisZone</report>
        <report indent="true">Virtualization.Reports.SolarisGlobalZone</report>
        <report indent="true">Virtualization.Reports.SolarisLDOMS</report>
        <report indent="true">Virtualization.Reports.AIXWPAR</report>
        <report indent="true">Virtualization.Reports.AIXWPARLPAR</report>
        <report indent="true">Virtualization.Reports.IBMPOWERHMC</report>
        <report indent="true">Virtualization.Reports.IBMPOWERFRAME</report>
        <report indent="true">Virtualization.Reports.IBMPOWERLPAR</report>
        <report indent="true">Virtualization.Reports.MSHyperV</report>
        <report indent="true">Virtualization.Reports.MSHyperVHost</report>
        <report indent="true">Virtualization.Reports.XenDomain</report>
        <report indent="true">Virtualization.Reports.XenDomain0</report>
        <report indent="true">Virtualization.Reports.OracleVMDomain</report>
        <report indent="true">Virtualization.Reports.OracleVMDomain0</report>
        <report indent="true">Virtualization.Reports.xVMGuestHost</report>
        <report indent="true">Virtualization.Reports.xVMPhysicalHost</report>
        <report>Virtualization.Reports.ContainedHosts</report>
        <report>Virtualization.Reports.LinkedVirtualFromPhysical</report>
        <chart>Virtualization.Charts.VMwareOSClassificationPie</chart>
        <chart>Virtualization.Charts.VMwareOSTypeDistributionPie</chart>
    </report-channel>

    <report-channel name="Reports.Channel.IBMPOWER">
        <title>IBM POWER Systems Infrastructure</title>
        <description>Reports around IBM POWER Systems including HMC, LPARs and WPARs</description>

        <report>Virtualization.Reports.IBMPOWERHMC</report>
        <report>Virtualization.Reports.IBMPOWERFRAME</report>
        <report indent="true">Virtualization.Reports.IBMPOWERLPAR</report>
        <report indent="true">Virtualization.Reports.AIXWPARLPAR</report>
        <report indent="true">Virtualization.Reports.AIXWPAR</report>
        <chart>Virtualization.Charts.LPAROSTypeDistributionPie</chart>
        <chart>Virtualization.Charts.LPAROSClassificationPie</chart>
    </report-channel>


    <report-channel name="Reports.Channel.VMwareInfrastructure">
        <title>VMware Infrastructure</title>
        <description>Reports around VMware infrastructure</description>
        <report>Virtualization.Reports.VMwarePhysicalHost</report>
        <report indent="true">Virtualization.Reports.VMwareGuestHost</report>
        <report indent="true">Virtualization.Reports.VMwareESXVuln</report>
        <chart>Virtualization.Charts.VMwareOSClassificationPie</chart>
        <chart>Virtualization.Charts.VMwareOSTypeDistributionPie</chart>
    </report-channel>

    <report-channel name="Reports.Channel.SolarisInfrastructure">
        <title>Solaris Infrastructure</title>
        <description>Reports around Solaris infrastructure including Zones, LDOMs</description>
        <report>Virtualization.Reports.SolarisLDOMS</report>
        <report>Virtualization.Reports.SolarisGlobalZone</report>
        <report indent="true">Virtualization.Reports.SolarisZone</report>
    </report-channel>

    <report-channel name="Reports.Channel.MSHYPERV">
        <title>Microsoft Hyper V Infrastructure</title>
        <description>Reports around Microsoft Hyper V</description>
        <report>Virtualization.Reports.MSHyperVHost</report>
        <report indent="true">Virtualization.Reports.MSHyperV</report>
    </report-channel>

    <report-channel name="Reports.Channel.OtherVirtualization">
        <title>Other Virtualization Technologies</title>
        <description>Virtualization Infrastructure</description>
        <report>Virtualization.Reports.XenDomain0</report>
        <report indent="true">Virtualization.Reports.XenDomain</report>
        <report>Virtualization.Reports.OracleVMDomain0</report>
        <report indent="true">Virtualization.Reports.OracleVMDomain</report>
        <report>Virtualization.Reports.xVMPhysicalHost</report>
        <report indent="true">Virtualization.Reports.xVMGuestHost</report>
    </report-channel>

    <report-channel name="Reports.Channel.GeneralVirtualization">
        <title>Virtualization and Partitioning General Reports</title>
        <description>Virtualization Reports that cross technologies</description>
        <report>Virtualization.Reports.ContainedHosts</report>
        <report>Virtualization.Reports.ClusterHosts</report>
        <report>Virtualization.Reports.PartitionHosts</report>
        <report>Virtualization.Reports.VirtualHosts</report>
        <report indent="true">Virtualization.Reports.VirtualToPhysical</report>
        <report indent="true">Virtualization.Reports.UnLinkedVirtualFromPhysical</report>
        <report indent="true">Virtualization.Reports.UnLinkedVirtualFromVirtual</report>
        <report indent="true">Virtualization.Reports.LinkedVirtualFromPhysical</report>
    </report-channel>



    <!--
    #########################################################################

        "INFRASTRUCTURE REPORTS" CHANNEL

    #########################################################################
    -->

    <report name="Infrastructure.Report.HostsByHostname">
        <title>All Hosts ordered by Hostname</title>
        <description>Show a list of all Discovered Hosts, ordered by their hostname</description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostsByHostname_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.HostsByLocationAndHostname">
        <title>All Hosts ordered by Location</title>
        <description>Show a list of all Discovered Hosts, ordered by their Location and hostname</description>
        <kind>Host</kind>
        <order-by>
            #ElementInLocation:Location:Location:Location.name,
            name
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostsByLocationAndHostname_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByLocationAndHostname_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByLocationAndHostname_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByLocationAndHostname_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                              WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.HostsByOSAndHostname">
        <title>All Hosts ordered by Operating System</title>
        <description>
            Show a list of all Discovered Hosts, ordered by their Operating System and hostname
        </description>
        <kind>Host</kind>
        <order-by>
            os_type,
            os_version,
            name
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostsByOSAndHostname_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOSAndHostname_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOSAndHostname_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOSAndHostname_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.HostsByOUAndHostname">
        <title>All Hosts ordered by Organizational Unit</title>
        <description>
            Show a list of all Discovered Hosts, ordered by their Organizational Unit and hostname
        </description>
        <kind>Host</kind>
        <order-by>
            #OwnedItem:Ownership:Owner:OrganisationalUnit.name,
            name
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostsByOUAndHostname_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOUAndHostname_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOUAndHostname_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByOUAndHostname_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.HostsByITOwnerAndHostname">
        <title>All Hosts ordered by Host Owner</title>
        <description>Show a list of all Discovered Hosts, ordered by their Host Owner and hostname</description>
        <kind>Host</kind>
        <order-by>
            #OwnedItem:Ownership:SupportOwner:Person.name,
            name
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostsByITOwnerAndHostname_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByITOwnerAndHostname_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByITOwnerAndHostname_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByITOwnerAndHostname_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.HostDomains">
        <title>Host NIS/Windows Domain</title>
        <description>
            Show a list of Host nodes and their discovered domain ordered by domain and hostname
        </description>
        <kind>Host</kind>
        <order-by>
            domain,
            name
        </order-by>
        <show>
            name,
            host_type,
            (domain OR 'Not Discovered') AS 'NIS/Windows Domain',
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="Infrastructure_Report_HostDomains_name">
                <title>Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR local_fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostDomains_ostype">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostDomains_domain">
                <title>Domain</title>
                <type name="TextField"/>
                <where>domain HAS SUBSTRING %(value)s</where>
            </parameter>
            <parameter name="Infrastructure_Report_HostDomains_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostDomains_orgunit">
                <title>Parent Organizational Unit</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH OrganisationalUnit
                             WHERE name IS DEFINED
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE OwnedItem:Ownership:Owner:OrganisationalUnit
                              EXPAND Child:Hierarchy:Parent:OrganisationalUnit
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_Report_HostsByHostname_group">
                <title>Group</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Group
                            WHERE name IS DEFINED AND type &lt;&gt; 'sub'
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>NODECOUNT(EXPAND ContainedItem:Containment:Container:Group
                                 WHERE type &lt;&gt; 'sub' AND name = %(value)s)
                </where>
            </parameter>
        </parameters>
    </report>

    <chart name="Infrastructure.Report.HostDomainsPie" default="pie">
        <title>Host NIS/Windows Domain Chart</title>
        <description>Show a chart of Host nodes and their discovered domain</description>
        <kind>Host</kind>
        <where>domain</where>
        <split>domain AS '_|Domain|_'</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            domain,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <report name="Infrastructure.Report.HBADetails">
        <title>Fibre Channel HBA</title>
        <description>
            Shows a list of Fibre Channel Host Based Adapters (HBA) and which Host
            they are installed in. The list includes the HBA identifier, WWNN and WWPN
        </description>
        <kind>FibreChannelHBA</kind>
        <show>
            (#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host.name) AS "_|Hostname|_",
            hba_id,
            (#FibreChannelDeviceWithNode:FibreChannelNodeDevice:FibreChannelNode:FibreChannelNode.wwnn) AS "_|WWNN|_",
            (#FibreChannelDeviceWithNode:FibreChannelNodeDevice:FibreChannelNode:FibreChannelNode.
                 #FibreChannelNodeWithPort:FibreChannelNodePort:FibreChannelPort:FibreChannelPort.wwpn) AS "_|WWPN|_"
        </show>
    </report>

    <report name="Infrastructure.Report.MACtoIP">
        <title>MAC to IP</title>
        <description>
            Shows a list of Network Interface MAC addresses against the IP addresses
            allocated to them and which Host they are installed in. The list includes
            the Interface Name, MAC and IP. Virtual interfaces on the same MAC address
            are shown on separate rows.
        </description>
        <kind>NetworkInterface</kind>
        <where>
                mac_addr IS DEFINED
            AND ip_addr IS DEFINED
        </where>
        <show>
            (#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host.name) AS '_|Hostname|_',
             name AS '_|Interface|_',
             mac_addr AS '_|MAC Address|_',
             ip_addr AS '_|IP Address|_'
        </show>
    </report>

    <report name="Infrastructure.Report.Packages.WhereInstalled">
        <title>Packages - Where Installed</title>
        <description>
            Shows package details and on what hosts they are installed. List can
            be filtered by package name.
        </description>
        <kind>Package</kind>
        <order-by>
            name,
            version
        </order-by>
        <show>
            SUMMARY,
            #InstalledSoftware:HostedSoftware:Host:Host.name AS "_|Host Name|_"
        </show>
        <parameters>
            <!-- Package name freeform text substring filter -->
            <parameter name="Infrastructure_Report_Packages_WhereInstalled_packagename">
                <title>Package Name</title>
                <type name="TextField"/>
                <where>name HAS SUBSTRING %(value)s</where>
            </parameter>
            <!-- Package version freeform text substring filter -->
            <parameter name="Infrastructure_Report_Packages_WhereInstalled_packageversion">
                <title>Package Version</title>
                <type name="TextField"/>
                <where>version HAS SUBSTRING %(value)s</where>
            </parameter>
            <!-- OS freeform text substring filter -->
            <parameter name="Infrastructure_Report_Packages_WhereInstalled_os">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os HAS SUBSTRING %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.Patches.WhereInstalled">
        <title>Patches - Where Installed</title>
        <description>
            Shows patch details and on what hosts they are installed.
            List can be filtered by patch name.
        </description>
        <kind>Patch</kind>
        <order-by>
            name,
            version
        </order-by>
        <show>
            name,
            os,
            #InstalledSoftware:HostedSoftware:Host:Host.name AS "_|Host Name|_"
        </show>
        <parameters>
            <!-- Patches freeform text substring filter -->
            <parameter name="Infrastructure_Report_Patches_WhereInstalled_patchname">
                <title>Patch Name</title>
                <type name="TextField"/>
                <where>name HAS SUBSTRING %(value)s</where>
            </parameter>
            <!-- OS freeform text substring filter -->
            <parameter name="Infrastructure_Report_Patches_WhereInstalled_os">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os HAS SUBSTRING %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.PackageLink">
        <title>Installed Packages</title>
        <description>
            Report to show Hosts linked to Packages. This is an intensive report
            and may take some time to run.
        </description>
        <kind>Package</kind>
        <where keyword="False" start="True">
            STEP IN InstalledSoftware:HostedSoftware
              WHERE kind(#:Host:.#) = 'Host'
        </where>
        <show>
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.name) AS 'Package Name',
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.version) AS 'Package Version',
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.os) AS 'Package OS',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.arch OR '')) AS 'Package Arch',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.description OR '')) AS 'Package Description',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.pkgname OR '')) AS 'Package pkgname',
            nodeLink(#:Host:Host.#, #:Host:Host.name) AS 'Host Name'
        </show>
        <parameters>
            <parameter name="package_os">
                <title>Package OS</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Package
                             WHERE os DEFINED
                            SHOW os
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Infrastructure.Channel.Reports">
        <title>Infrastructure Reports</title>
        <description>Shows a list of commonly used Infrastructure reports</description>
        <report>Infrastructure.Report.HostsByHostname</report>
        <report indent="true">Infrastructure.Report.HostsByOSAndHostname</report>
        <report indent="true">Infrastructure.Report.HostsByLocationAndHostname</report>
        <report indent="true">Infrastructure.Report.HostsByOUAndHostname</report>
        <report indent="true">Infrastructure.Report.HostsByITOwnerAndHostname</report>
        <report>Infrastructure.Report.HostDomains</report>
        <chart>Infrastructure.Report.HostDomainsPie</chart>
        <report>Infrastructure.Report.HBADetails</report>
        <report>Infrastructure.Report.MACtoIP</report>
        <report>Infrastructure.Report.NetworkMismatchSummary</report>
        <chart>Infrastructure.Chart.IPAddressDistribution</chart>
    </report-channel>

    <report-channel name="Infrastructure.Channel.InstalledSoftware">
        <title>Installed Software</title>
        <description>Shows a list of reports on patches and packages</description>
        <report>Infrastructure.Reports.PackageLink</report>
        <report indent="true">Infrastructure.Report.Packages.WhereInstalled</report>
        <report indent="true">Infrastructure.Report.Patches.WhereInstalled</report>
    </report-channel>

    <!--
    #########################################################################

        "OPERATIONAL INTEGRITY" CHANNEL

    #########################################################################
    -->

    <report name="OperationalIntegrity.Report.FailedPSUs">
        <title>Hosts with one or more failed PSUs</title>
        <description>Shows a list of Hosts with one or more failed Power Supply Units (PSUs)</description>
        <kind>Host</kind>
        <where>'FAILED' in psu_status</where>
        <order-by>name</order-by>
        <show>
            name,
            os_type,
            os_version,
            psu_status
        </show>
    </report>

    <report name="OperationalIntegrity.Report.NoRedundantPSU">
        <title>Hosts with a single PSU</title>
        <description>Shows a list of Hosts with only one Power Supply Unit (PSU)</description>
        <kind>Host</kind>
        <where>len(psu_status) = 1</where>
        <order-by>name</order-by>
        <show>
            name,
            os_type,
            os_version,
            psu_status
        </show>
    </report>

    <report name="OperationalIntegrity.Report.NoPSUInfo">
        <title>Hosts with no PSU information</title>
        <description>
            Shows a list of Hosts where no Power Supply Unit (PSU) information is available
        </description>
        <kind>Host</kind>
        <where>not psu_status</where>
        <order-by>name</order-by>
        <show>
            name,
            os_type,
            os_version
        </show>
    </report>

    <report name="OperationalIntegrity.Reports.NoDNS">
        <title>Hosts with any Interface requiring DNS identification</title>
        <description>Shows a list of Host interfaces with IP Addresses that are not resolved by DNS</description>
        <kind>NetworkInterface</kind>
        <where>
            ip_addr
            AND NOT fqdns
        </where>
        <order-by>
            label(#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host),
            name
        </order-by>
        <show>
            label(#InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host) AS "_|Host|_",
            name,
            ip_addr,
            mac_addr
        </show>
    </report>

    <report name="OperationalIntegrity.Reports.NoDNSAtAll">
        <title>Hosts with all Interfaces requiring DNS identification</title>
        <description>Shows a list of Hosts that have no interfaces with IP Addresses that are resolved by DNS</description>
        <kind>Host</kind>
        <where>
            nodecount(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface WHERE ip_addr AND fqdns) = 0
        </where>
        <order-by>
            name,
            #DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface.name
        </order-by>
        <show>
            name,
            EXPLODE #DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface.name,
            #DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface.ip_addr,
            #DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface.mac_addr
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.OperationalIntegrity">
        <title>Operational Integrity</title>
        <description>Operational Integrity</description>
        <report>OperationalIntegrity.Report.FailedPSUs</report>
        <report>OperationalIntegrity.Report.NoRedundantPSU</report>
        <report>OperationalIntegrity.Report.NoPSUInfo</report>
        <report>OperationalIntegrity.Reports.NoDNS</report>
        <report>OperationalIntegrity.Reports.NoDNSAtAll</report>
    </report-channel>

    <!--
    #########################################################################

        "DISCOVERY ACCESS" CHANNEL

    #########################################################################
    -->

    <report name="Discovery.Report.DiscoveryRunCurrent">
        <!-- This report is used by the UI -->
        <title>View Current Discovery Runs</title>
        <description>View Current Discovery Runs</description>
        <kind>DiscoveryRun</kind>
        <where>
                __inprogress IS DEFINED
            AND _consolidation_source IS NOT DEFINED
        </where>
        <order-by>starttime DESC</order-by>
        <show>
            starttime AS '_|Start Time|_',
            done * 100 / total AS '_|Percent Complete|_',
            scan_level,
            user,
            label
        </show>
    </report>

    <report name="Discovery.Report.DiscoveryRun">
        <!-- This report is used by the UI -->
        <title>View Completed Discovery Runs</title>
        <description>View Completed Discovery Runs</description>
        <kind>DiscoveryRun</kind>
        <where>
                starttime &gt; %(from)d
            AND endtime &lt;= %(to)d + 864000000000
            AND endtime IS DEFINED
        </where>
        <order-by>starttime DESC</order-by>
        <show>
            starttime AS '_|Start Time|_',
            endtime AS '_|End Time|_',
            duration(starttime, endtime) AS '_|Total Duration|_',
            scan_level,
            user,
            label,
            boolToString(cancelled) AS '_|Cancelled|_'
        </show>
        <imports>
            <import>common.timeutil</import>
        </imports>
        <parameters>
            <parameter name="Discovery_report_DiscoveryRun_starttime">
                <title>Start Date</title>
                <type name="DateField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() - common.timeutil.ONE_DAY)
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Discovery_report_DiscoveryRun_endtime">
                <title>End Date</title>
                <type name="DateField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>common.timeutil.convertToUnix(common.timeutil.currentTime())</default>
                </type>
                <key>to</key>
            </parameter>
        </parameters>
    </report>

    <report name="Discovery.Report.ConsolidationRunCurrent">
        <!-- This report is used by the UI -->
        <title>View Current Consolidation Runs</title>
        <description>View Current Consolidation Runs</description>
        <kind>DiscoveryRun</kind>
        <where>
                __inprogress IS DEFINED
            AND _consolidation_source IS DEFINED
        </where>
        <order-by>starttime DESC, discovery_starttime DESC</order-by>
        <show>
            time((starttime or "Not started")) AS '_|Start Time|_',
            done * 100 / total AS '_|Percent Complete|_',
            scan_level,
            user,
            label
        </show>
    </report>

    <report name="Discovery.Report.ScheduledRanges">
        <!-- This report is used by the UI -->
        <title>View All Scheduled Runs</title>
        <description>Show a list of all scheduled scans</description>
        <kind>IPRange</kind>
        <where>scan_type &lt;&gt; "Snapshot"</where>
        <show>
            label AS "_|Label|_",
            range_string AS "_|IP Range|_",
            scan_level AS "_|Level|_",
            recurrenceDescription(repeat) AS "_|Date Rules|_",
            scheduling_user AS "_|User|_",
            created_time AS "_|Created|_"
        </show>
    </report>

    <report name="Discovery.Report.ExcludeRanges">
        <!-- This report is used by the UI -->
        <title>View All Exclude Ranges</title>
        <description>Show a list of all exclude ranges</description>
        <kind>ExcludeRange</kind>
        <show>
            name AS "_|Label|_",
            range_string AS "_|Range|_",
            description AS "_|Description|_",
            fullFoundationName(user) AS "_|User|_"
        </show>
    </report>

    <report name="Discovery.Report.AccessAnalysis">
        <title>Current Endpoint Access Analysis</title>
        <description>
            Allows the analysis of the latest endpoint access to assist Discovery Troubleshooting
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class
        </where>
        <order-by>discovery_starttime DESC</order-by>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'Discovered OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                       TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host
                          WHERE NOT destroyed(#)) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                          WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </report>

    <report name="Discovery.Report.PossibleHostDevices">
        <title>Possible Endpoint Host Devices (Detailed)</title>
        <description>
            List of Endpoints not accessed or related to current Hosts but
            believed to be Host devices on their last access, with detailed OS
            breakdown where available.
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker IS DEFINED
            AND endtime IS DEFINED
            AND end_state = 'NoAccess'
            AND NODECOUNT(TRAVERSE FLAGS(include_destroyed) ::InferredElement:Host) = 0
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
        </where>
        <order-by>discovery_starttime DESC</order-by>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                       TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host
                          WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                          WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </report>

    <report name="Discovery.Report.PossibleNonHostDevices">
        <title>Possible Endpoint Non Host Devices</title>
        <description>
            List of Endpoints not accessed or related to current Hosts but
            believed to be non Host devices such as printers, routers etc on
            their last access
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker IS DEFINED
            AND endtime IS DEFINED
            AND end_state = 'UnsupportedDevice'
            AND NODECOUNT(TRAVERSE FLAGS(include_destroyed) ::InferredElement:Host) = 0
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind &lt;&gt; 'Host'
        </where>
        <order-by>discovery_starttime DESC</order-by>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            (NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                       TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host
                          WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                          WHERE not provider) &gt; 0) AS 'Session Results Logged',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.sysobjectid AS 'SNMP sysObjectId'
        </show>
    </report>

    <report name="Discovery.Report.PossibleHostUpdateProblems">
        <title>Host Endpoints Not Updating</title>
        <description>
            List of Endpoints related to existing Host nodes that do not cause
            a Host node update on their last access
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
            AND NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                          TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host) = 0
            AND NODECOUNT(TRAVERSE FLAGS(include_destroyed) ::InferredElement:Host) &gt; 0
        </where>
        <order-by>discovery_starttime DESC</order-by>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'Discovered OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                       TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host
                       WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                       WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </report>

    <report name="Discovery.Report.PossibleHostSessionProblems">
        <title>Host Endpoints With Session Issues</title>
        <description>
            List of Endpoints related to existing Host nodes that caused a Host
            node update on their last access, but also had Session Issues
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND NOT _first_marker
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
            AND NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                          WHERE not provider) &gt; 0
            AND NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                          TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host) &gt; 0
            AND NODECOUNT(TRAVERSE FLAGS(include_destroyed) ::InferredElement:Host) &gt; 0
        </where>
        <order-by>discovery_starttime DESC</order-by>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'Discovered OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                         WHERE not provider) AS 'Session Results Logged'
        </show>
    </report>

    <report name="Discovery.Report.PossiblePortToProcessProblems">
        <title>Host Endpoints With Possible Process To Port Issues</title>
        <description>
            List of Endpoints related to existing Host nodes that caused a Host
            node update on their last access, but for which we cannot determine
            Process to Port mappings
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
               WHERE failure_reason = 'NoAccessMethod'
                 AND NODECOUNT(TRAVERSE List:List:Member:DiscoveredListeningPort) > 0
            TRAVERSE DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess
        </where>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'Discovered OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                      WHERE not provider) AS 'Session Results Logged',
            join(#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList.#DiscoveryResult:Metadata:Detail:ScriptFailure.script_name, ', ') AS 'Script Failures Logged',
            join(#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList.#DiscoveryResult:Metadata:Detail:CommandFailure.command_name, ', ') AS 'Command Failures Logged'
        </show>
    </report>

    <report name="Discovery.Report.SeenButUnscanned">
        <title>Seen but unscanned IPs</title>
        <description>
            List of IPs that we have not scanned for which connections were
            seen in the last access
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
            TRAVERSE List:List:Member:DiscoveredNetworkConnection
        </where>
        <show>
            remote_ip_addr AS "Unscanned Host IP Address"
            PROCESS WITH
                connectionsToUnseen,
                countUnique(0,1,1, "Network Connection Count")
        </show>
    </report>

    <report name="Discovery.Report.SeenButUnscannedPort">
        <title>Seen but unscanned IPs with Ports</title>
        <description>
            List of IPs that we have not scanned for which connections were seen
            in the last access. This report lists which port the connection was
            to, but will result in a much more detailed report. Initially use
            the variant of this report with no port information.
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
            TRAVERSE List:List:Member:DiscoveredNetworkConnection
        </where>
        <show>
            remote_ip_addr AS "Unscanned Host IP Address",
            remote_port AS 'Unscanned Host Port'
            PROCESS WITH
                connectionsToUnseen,
                countUnique(0,1,1, "Network Connection Count")
        </show>
    </report>

    <chart name="Discovery.Chart.LastAccessSummary" default="pie">
        <title>Summary of Last Endpoint Access for Host Devices</title>
        <description>
            Shows a summary of the access used on the last access to the
            endpoints classified as a Host
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
                _last_marker
            AND endtime
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
        </where>
        <split>
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS '_|Current Access|_'
        </split>
        <show>SUMMARY</show>
    </chart>

    <report name="Discovery.Report.DiscoveryConditionsDetailed">
        <title>Discovery Conditions Detailed List</title>
        <description>
            Shows a list of Discovery Conditions logged, including time first
            logged. Use this report to export a task list via CSV.
        </description>
        <kind>DiscoveryCondition</kind>
        <where keyword="False" start="True">
            TRAVERSE DiscoveryCondition:DiscoveryCondition
        </where>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            nodeLink(#:ElementWithCondition:Host.#, #:ElementWithCondition:Host.name) AS "Host",
            nodeLink(#:ElementWithCondition:Host.#, #:DiscoveryCondition:DiscoveryCondition.type) AS "Type",
            nodeLink(#:ElementWithCondition:Host.#, #:DiscoveryCondition:DiscoveryCondition.impact) AS "Impact",
            nodeLink(#:ElementWithCondition:Host.#, friendlyTime(creationTime(#))) AS "First Logged"
        </show>
        <parameters>
            <!-- Refine by impact -->
            <parameter name="Discovery_report_DiscoveryConditions_impact">
                <title>Impact</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH DiscoveryCondition
                            SHOW impact
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>impact = %(value)s</where>
            </parameter>
            <!-- Refine by type -->
            <parameter name="Discovery_report_DiscoveryConditions_type">
                <title>Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH DiscoveryCondition
                            SHOW type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Discovery.Report.DiscoveryConditionsHost">
        <title>Hosts impacted By Discovery Conditions</title>
        <description>Shows a list of Hosts impacted by selected Discovery Conditions</description>
        <kind>DiscoveryCondition</kind>
        <where keyword="False" start="True">
            TRAVERSE DiscoveryCondition:DiscoveryCondition:ElementWithCondition:Host
        </where>
        <show>
            EXPLODE #ElementWithCondition:DiscoveryCondition:DiscoveryCondition:DiscoveryCondition.type AS "Condition Type",
            EXPLODE #ElementWithCondition:DiscoveryCondition:DiscoveryCondition:DiscoveryCondition.impact AS "Impact",
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND "Virtual") OR "Not Virtual") AS "Virtual",
            (vendor OR "Not Discovered") AS "Vendor",
            (model OR "Not Discovered") AS "Model",
            (ram OR "Not Discovered") AS "RAM",
            (num_processors OR "Not Discovered") AS "Physical CPU",
            (processor_type OR "Not Discovered") AS "CPU Type",
            join((#OwnedItem:Ownership::Person.name OR "None Linked"), ", ") AS "Host Owner",
            join((#ElementInLocation:Location:Location:Location.name OR "None Linked"), ", ") AS "Location",
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR "None Linked"), ", ") AS "Applications",
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR "DDD Aged Out"), ", ") AS "Scanned Via"
        </show>
        <parameters>
            <!-- Refine by impact -->
            <parameter name="Discovery_report_DiscoveryConditions_impact">
                <title>Impact</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH DiscoveryCondition
                            SHOW impact
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>impact = %(value)s</where>
            </parameter>
            <!-- Refine by type -->
            <parameter name="Discovery_report_DiscoveryConditions_type">
                <title>Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH DiscoveryCondition
                            SHOW type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->
    <!-- Channel for Dashboard -->

    <report-channel name="Discovery.Channel.DiscoveryReportChannel">
        <title>Discovery Dashboard Reports</title>
        <description>Reports about discovery</description>
        <report>Discovery.Report.AccessAnalysis</report>
        <report indent="true">Discovery.Report.PossibleHostUpdateProblems</report>
        <report indent="true">Discovery.Report.PossibleHostSessionProblems</report>
        <report indent="true">Discovery.Report.PossiblePortToProcessProblems</report>
        <report indent="true">Discovery.Report.PossibleHostDevices</report>
        <report indent="true">Discovery.Report.PossibleNonHostDevices</report>
        <report>Discovery.Report.DiscoveryRunCurrent</report>
        <report>Discovery.Report.ConsolidationRunCurrent</report>
        <report>Discovery.Report.SeenButUnscanned</report>
        <report indent="true">Discovery.Report.SeenButUnscannedPort</report>
        <chart>Discovery.Chart.LastAccessSummary</chart>
        <report>Discovery.Report.DiscoveryConditionsDetailed</report>
        <report>Discovery.Report.DiscoveryConditionsHost</report>
    </report-channel>

    <!--
    #########################################################################

        "INFRASTRUCTURE HOST REPORTS" CHANNEL

    #########################################################################
    -->

    <report name="Infrastructure.Report.seenButUnscannedHostSummary">
        <title>Seen but unscanned IPs Summary Report</title>
        <description>
            This report displays summary details of Hosts that were seen but are
            not present in the datastore. That is, a Host that was not
            discovered, for example, it was behind a firewall, on a subnet that
            was not scanned, or credentials were not available to log in to it.
            However, its existence can be inferred by network connections to its
            IP address from known hosts.
        </description>
        <flags keyword="False">%(destroyed_flags)s</flags>
        <kind>Host</kind>
        <where keyword="False" start="True">
            TRAVERSE InferredElement:Inference:Associate:DiscoveryAccess
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
            TRAVERSE List:List:Member:DiscoveredNetworkConnection
        </where>
        <show>
            remote_ip_addr AS "Unscanned Host IP Address"
            %(port_attr)s
            PROCESS WITH
                connectionsToUnseen,
                countUnique(0, 1, 1, "Network Connection Count")
        </show>
        <parameters>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_name">
                <title>Known host name / address</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBWORD %(value)s
                     OR __all_ip_addrs HAS SUBWORD %(value)s
                     OR __all_dns_names HAS SUBWORD %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_subnet">
                <title>Subnet</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Subnet
                            ORDER BY ip_address_range
                            SHOW ip_address_range
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface
                              TRAVERSE DeviceOnSubnet:DeviceSubnet:Subnet:Subnet
                                 WHERE ip_address_range = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_os">
                <title>Operating system</title>
                <type name="TextField"/>
                <where>
                    (   os HAS SUBWORD %(value)s
                     OR os_type HAS SUBWORD %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_ports">
                <title>Include port numbers</title>
                <type name="CheckboxField">
                    <convert>lambda x: x and ", remote_port AS 'Unscanned Host Port'" or ""</convert>
                    <default>0</default>
                    <escape>False</escape>
                </type>
                <key>port_attr</key>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostSummary_includeSuperseded">
                <title>Include superseded network connections</title>
                <type name="CheckboxField">
                    <convert>lambda x: x and "FLAGS(include_destroyed)" or ""</convert>
                    <default>0</default>
                    <escape>False</escape>
                </type>
                <key>destroyed_flags</key>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Report.seenButUnscannedHostDetail">
        <title>Seen but unscanned IPs Detail Report</title>
        <description>
            This report displays details of Hosts that were seen but not
            scanned. That is, a Host that was not discovered, for example, it
            was behind a firewall or on a subnet that was not scanned. However,
            its existence can be inferred by network connections to its IP
            address from known hosts.
        </description>
        <flags keyword="False">%(destroyed_flags)s</flags>
        <kind>Host</kind>
        <where keyword="False" start="True">
            TRAVERSE InferredElement:Inference:Associate:DiscoveryAccess
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
            TRAVERSE List:List:Member:DiscoveredNetworkConnection
        </where>
        <order-by>
            remote_ip_addr,
            remote_port
        </order-by>
        <show>
            remote_ip_addr AS "Unscanned Host IP Address",
            remote_port AS "Unscanned Host Port",
            #Member:List:List:NetworkConnectionList.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.
                #Associate:Inference:InferredElement:Host.name AS "Known Host Name",
            local_ip_addr AS "Known Host IP Address",
            local_port AS "Known Host Port"
            PROCESS WITH
                connectionsToUnseen
        </show>
        <parameters>
            <parameter name="Infrastructure_report_SeenButUnscannedHostDetail_name">
                <title>Known host name / address</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBWORD %(value)s
                     OR __all_ip_addrs HAS SUBWORD %(value)s
                     OR __all_dns_names HAS SUBWORD %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostDetail_subnet">
                <title>Subnet</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Subnet
                            ORDER BY ip_address_range
                            SHOW ip_address_range
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface
                              TRAVERSE DeviceOnSubnet:DeviceSubnet:Subnet:Subnet
                                 WHERE ip_address_range = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostDetail_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostDetail_os">
                <title>Operating system</title>
                <type name="TextField"/>
                <where>
                    (   os HAS SUBWORD %(value)s
                     OR os_type HAS SUBWORD %(value)s)
                </where>
            </parameter>
            <parameter name="Infrastructure_report_SeenButUnscannedHostDetail_includeSuperseded">
                <title>Include superseded network connections</title>
                <type name="CheckboxField">
                    <convert>lambda x: x and "FLAGS(include_destroyed)" or ""</convert>
                    <default>0</default>
                    <escape>False</escape>
                </type>
                <key>destroyed_flags</key>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.NewHosts">
        <title>Newly Discovered Hosts</title>
        <description>Report to show new Hosts found in the given period</description>
        <kind>Host</kind>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            name,
            whenWasThat(creationTime(#)) AS 'Created',
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="NewHost_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Infrastructure.Channel.HostReports">
        <title>Infrastructure Host Reports</title>
        <description>Reports about host infrastructure</description>
        <report>Infrastructure.Report.seenButUnscannedHostSummary</report>
        <report indent="true">Infrastructure.Report.seenButUnscannedHostDetail</report>
        <report>Infrastructure.Reports.NewHosts</report>
    </report-channel>

    <!--
    #########################################################################

        "CHANGE CONTROL" CHANNEL

    #########################################################################
    -->

    <report name="Discovery.Report.HostHWConfiguration">
        <title>Host Hardware Configuration changes</title>
        <description>
            Shows detected Host Hardware Configuration changes over a user
            selectable period of time. Attributes considered are those in the
            Hardware and Network section of a Host. By default the time is the
            last day.
        </description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            name,
            model,
            serial,
            hostid,
            ram,
            num_processors,
            processor_type,
            num_logical_processors,
            cores_per_processor,
            threads_per_core,
            psu_status
            PROCESS WITH
                displayHistory(%(from)d, %(to)d, 1)
        </show>
        <imports>
            <import>common.timeutil</import>
        </imports>
        <parameters>
            <parameter name="Discovery_report_HostHWConfiguration_from">
                <title>From</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() -
                                                      common.timeutil.ONE_DAY)
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_to">
                <title>To</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>common.timeutil.convertToUnix(common.timeutil.currentTime())</default>
                </type>
                <key>to</key>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_name">
                <title>Host Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                              WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_os">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Discovery.Report.HostHWConfigurationDropDown">
        <title>Host Hardware Configuration changes via drop down</title>
        <description>
            Shows detected Host Hardware Configuration changes over a user
            selectable period of time. Attributes considered are those in the
            Hardware and Network section of a Host. By default the time is the
            last day.
        </description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            name,
            model,
            serial,
            hostid,
            ram,
            num_processors,
            processor_type,
            num_logical_processors,
            cores_per_processor,
            threads_per_core,
            psu_status
            PROCESS WITH
                displayHistory(%(from)d, %(to)d, 1)
        </show>
        <imports>
            <import>common.timeutil</import>
        </imports>
        <parameters>
            <parameter name="Discovery_report_HostHWConfiguration_from">
                <title>From</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() -
                                                      common.timeutil.ONE_DAY)
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_to">
                <title>To</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>common.timeutil.convertToUnix(common.timeutil.currentTime())</default>
                </type>
                <key>to</key>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_name">
                <title>Host Name</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE name
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>name = %(value)s</where>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostHWConfiguration_os">
                <title>Operating System</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Discovery.Report.HostOSConfiguration">
        <title>Host OS Configuration changes</title>
        <description>
            Shows detected Host OS Configuration changes over a user selectable
            period of time. Attributes considered are those in the Operating
            System section of a Host. By default the time is the last day.
        </description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            name,
            os,
            os_class,
            os_type,
            os_version,
            os_edition,
            os_build,
            service_pack,
            kernel,
            patch_count,
            package_count
            PROCESS WITH
                displayHistory(%(from)d, %(to)d, 1)
        </show>
        <imports>
            <import>common.timeutil</import>
        </imports>
        <parameters>
            <parameter name="Discovery_report_HostOSConfiguration_from">
                <title>From</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() -
                                                      common.timeutil.ONE_DAY)
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_to">
                <title>To</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>common.timeutil.convertToUnix(common.timeutil.currentTime())</default>
                </type>
                <key>to</key>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_name">
                <title>Host Name</title>
                <type name="TextField"/>
                <where>
                    (   name HAS SUBSTRING %(value)s
                     OR synonyms HAS SUBSTRING %(value)s
                     OR fqdn HAS SUBSTRING %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_os">
                <title>Operating System</title>
                <type name="TextField"/>
                <where>os_type HAS SUBSTRING %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Discovery.Report.HostOSConfigurationDropDown">
        <title>Host OS Configuration changes via drop down</title>
        <description>
            Shows detected Host OS Configuration changes over a user selectable
            period of time. Attributes considered are those in the Operating
            System section of a Host. By default the time is the last day.
        </description>
        <kind>Host</kind>
        <order-by>name</order-by>
        <show>
            name,
            os,
            os_class,
            os_type,
            os_version,
            os_edition,
            os_build,
            service_pack,
            kernel,
            patch_count,
            package_count
            PROCESS WITH
                displayHistory(%(from)d, %(to)d, 1)
        </show>
        <imports>
            <import>common.timeutil</import>
        </imports>
        <parameters>
            <parameter name="Discovery_report_HostOSConfiguration_from">
                <title>From</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() -
                                                      common.timeutil.ONE_DAY)
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_to">
                <title>To</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>common.timeutil.convertToUnix(common.timeutil.currentTime())</default>
                </type>
                <key>to</key>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_name">
                <title>Host Name</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE name
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>name = %(value)s</where>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_location">
                <title>Parent Location</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Location
                             WHERE name
                            ORDER BY name
                            SHOW name
                        </query>
                    </options>
                </type>
                <where>
                    NODECOUNT(TRAVERSE ElementInLocation:Location:Location:Location
                              EXPAND ContainedLocation:LocationContainment:LocationContainer:Location
                               WHERE name = %(value)s)
                </where>
            </parameter>
            <parameter name="Discovery_report_HostOSConfiguration_os">
                <title>Operating System</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.ChangeControl">
        <title>Change Control</title>
        <description>Change detection reports</description>
        <report>Discovery.Report.HostHWConfiguration</report>
        <report>Discovery.Report.HostHWConfigurationDropDown</report>
        <report>Discovery.Report.HostOSConfiguration</report>
        <report>Discovery.Report.HostOSConfigurationDropDown</report>
    </report-channel>

    <!--
    #########################################################################

        "SOFTWARE REPORTS" CHANNEL

    #########################################################################
    -->

    <report name="Software.Report.InstanceSummary">
        <title>Software Inventory - Summary</title>
        <description>
            Shows a summary of the distribution of versions of a piece of software
        </description>
        <kind>SoftwareInstance</kind>
        <show>
            type AS "_|Type|_",
            product_version AS "_|Product Version|_"
            PROCESS WITH
                countUnique(1,0)
        </show>
        <parameters>
            <parameter name="Software_Report_InstanceSummary_type">
                <title>Product type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH SoftwareInstance
                            ORDER BY type
                            SHOW type
                            PROCESS WITH unique()
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Software.Report.InstanceDetail">
        <title>Software Inventory - Detail</title>
        <description>
            Shows details of where software is running, with version information
        </description>
        <kind>SoftwareInstance</kind>
        <order-by>
            type,
            product_version,
            version
        </order-by>
        <show>
            type,
            product_version,
            version,
            kind(provenance(#, "version")) AS "_|Full Version Provenance|_",
            #:HostedSoftware:Host:Host.name,
            #:HostedSoftware:Host:Host.os AS "_|Discovered OS|_"
        </show>
        <parameters>
            <parameter name="Software_Report_InstanceDetail_type">
                <title>Product type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH SoftwareInstance
                            ORDER BY type
                            SHOW type
                            PROCESS WITH unique()
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Runtime.Report.InstanceSummary">
        <title>Runtime Environment Inventory - Summary</title>
        <description>
            Shows a summary of the distribution of versions of a runtime environment
        </description>
        <kind>RuntimeEnvironment</kind>
        <show>
            type AS "_|Type|_",
            product_version AS "_|Product Version|_"
            PROCESS WITH
                countUnique(1,0)
        </show>
        <parameters>
            <parameter name="Runtime_Report_InstanceSummary_type">
                <title>Product type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH RuntimeEnvironment
                            ORDER BY type
                            SHOW type
                            PROCESS WITH unique()
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Runtime.Report.InstanceDetail">
        <title>Runtime Environment Inventory - Detail</title>
        <description>
            Shows details of where runtime environments are running, with version information
        </description>
        <kind>RuntimeEnvironment</kind>
        <order-by>
            type,
            product_version,
            version
        </order-by>
        <show>
            type,
            product_version,
            version,
            kind(provenance(#, "version")) AS "_|Full Version Provenance|_",
            #:HostedSoftware:Host:Host.name,
            #:HostedSoftware:Host:Host.os AS "_|Discovered OS|_"
        </show>
        <parameters>
            <parameter name="Runtime_Report_InstanceDetail_type">
                <title>Product type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH RuntimeEnvironment
                            ORDER BY type
                            SHOW type
                            PROCESS WITH unique()
                        </query>
                    </options>
                </type>
                <where>type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.Software">
        <title>Software Reports</title>
        <description>Software Reports</description>
        <report>Software.Report.InstanceSummary</report>
        <report>Software.Report.InstanceDetail</report>
        <report>Runtime.Report.InstanceSummary</report>
        <report>Runtime.Report.InstanceDetail</report>
    </report-channel>

    <!--
    #########################################################################

        "DATA CENTRE STANDARDIZATION REPORTS" CHANNEL

    #########################################################################
    -->

    <report name="DataCentreStand.Reports.HostByVendorDist">
        <title>Host Distribution by Vendor</title>
        <description>
            Shows a distribution of the Hosts per Vendor. Note that unknown
            Vendors are excluded, for this detail use Host Distribution By
            Vendor and Model
        </description>
        <kind>Host</kind>
        <show>
            vendor AS '_|Vendor|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.HostByVendorModelDist">
        <title>Host Distribution by Vendor and Model</title>
        <description>Shows a distribution of the Hosts per Vendor and Model</description>
        <kind>Host</kind>
        <show>
            vendor AS '_|Vendor|_',
            model AS '_|Model|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.HostByVendor">
        <title>Host Summary by Vendor</title>
        <description>Shows a list of the Hosts per Vendor</description>
        <kind>Host</kind>
        <show>
            name,
            serial,
            ram AS "_|Memory|_",
            __all_ip_addrs AS "_|IP Addresses|_",
            os_type AS "_|OS Type|_",
            os,
            model,
            num_processors AS "_|CPUs|_",
            processor_type,
            vendor
        </show>
        <parameters>
            <parameter name="DataCentreStand_Reports_HostByVendor_vendor">
                <title>Vendor</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE vendor
                            SHOW vendor
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>vendor = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="DataCentreStand.Reports.HostByVendorModel">
        <title>Host Summary by Vendor and Model</title>
        <description>Shows a list of the Hosts per Vendor and Model</description>
        <kind>Host</kind>
        <show>
            name,
            serial,
            ram AS "_|Memory|_",
            __all_ip_addrs AS "_|IP Addresses|_",
            os_type AS "_|OS Type|_",
            os,
            model,
            num_processors AS "_|CPUs|_",
            processor_type,
            vendor
        </show>
        <parameters>
            <parameter name="DataCentreStand_Reports_HostByVendor_vendor">
                <title>Vendor</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE vendor
                            SHOW vendor
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>vendor = %(value)s</where>
            </parameter>
            <parameter name="DataCentreStand_Reports_HostByVendor_model">
                <title>Model</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE model
                            SHOW model
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>model = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="DataCentreStand.Reports.WindowsVersionDist">
        <title>Windows Version Distribution</title>
        <description>Shows a distribution of Windows versions</description>
        <kind>Host</kind>
        <where>os_class = 'Windows'</where>
        <show>
            os_version AS '_|Windows Version|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.WindowsVersionEditionDist">
        <title>Windows Version [Edition] Distribution</title>
        <description>Shows a distribution of the Version [Edition] for Windows</description>
        <kind>Host</kind>
        <where>os_class = 'Windows'</where>
        <show>
            #'%s [%s]' (os_version, os_edition) AS '_|Windows Version [Edition]|_'
            PROCESS WITH
               countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.UnixDist">
        <title>UNIX Type Distribution</title>
        <description>
            Shows a distribution of UNIX type operating systems (includes
            GNU/Linux and FreeBSD)
        </description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <show>
            os_type AS '_|UNIX Type|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.UnixVersionDist">
        <title>UNIX Version Distribution</title>
        <description>
            Shows a distribution of UNIX type operating systems (includes
            GNU/Linux and FreeBSD) and Version
        </description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <show>
            #'%s %s' (os_type, os_version) AS '_|UNIX Type and Version|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="DataCentreStand.Channel.DataCentreStandardizationReports">
        <title>Data Centre Standardization - Reports</title>
        <description>Shows a list of Data Centre Standardization Reports</description>
        <report>DataCentreStand.Reports.HostByVendorDist</report>
        <report indent="true">DataCentreStand.Reports.HostByVendor</report>
        <report>DataCentreStand.Reports.HostByVendorModelDist</report>
        <report indent="true">DataCentreStand.Reports.HostByVendorModel</report>
        <report>DataCentreStand.Reports.WindowsVersionDist</report>
        <report indent="true">DataCentreStand.Reports.WindowsVersionEditionDist</report>
        <report>DataCentreStand.Reports.UnixDist</report>
        <report indent="true">DataCentreStand.Reports.UnixVersionDist</report>
    </report-channel>

    <!--
    #########################################################################

        "DATA CENTRE STANDARDIZATION CHARTS" CHANNEL

    #########################################################################
    -->

    <chart name="DataCentreStand.Reports.HostByVendorPie" default="pie">
        <title>Host Vendor Distribution</title>
        <description>Shows a list of the Hosts per Vendor</description>
        <kind>Host</kind>
        <order-by>vendor</order-by>
        <split>vendor as "_|Vendor|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="DataCentreStand.Reports.WindowsVersionPie" default="pie">
        <title>Windows Version Distribution</title>
        <description>Shows a list of the Version for Windows</description>
        <kind>Host</kind>
        <where>os_class = 'Windows'</where>
        <order-by>os_version</order-by>
        <split>os_version as "_|Windows Version|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="DataCentreStand.Reports.WindowsVersionEditionPie" default="pie">
        <title>Windows Version [Edition] Distribution</title>
        <description>Shows a list of the Version [Edition] for Windows</description>
        <kind>Host</kind>
        <where>os_class = 'Windows'</where>
        <order-by>#'%s [%s]' (os_version, os_edition)</order-by>
        <split>#'%s [%s]' (os_version, os_edition) AS '_|Windows Version [Edition]|_'</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="DataCentreStand.Reports.UnixTypePie" default="pie">
        <title>UNIX Type Distribution</title>
        <description>
            Shows a distribution of UNIX type operating systems (includes GNU/Linux and FreeBSD)
        </description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <order-by>os_type</order-by>
        <split>os_type as "_|UNIX Type|_"</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <chart name="DataCentreStand.Reports.UnixVersionPie" default="pie">
        <title>UNIX Version Distribution</title>
        <description>
            Shows a list of UNIX type operating systems (includes GNU/Linux and FreeBSD) and Version
        </description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <order-by>#'%s %s' (os_type, os_version)</order-by>
        <split>#'%s %s' (os_type, os_version) AS '_|UNIX Type and Version|_'</split>
        <y-axis-title>_|Hosts|_</y-axis-title>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#OwnedItem:Ownership:Owner:OrganisationalUnit.name OR 'None Linked'), ', ') AS 'Organizational Unit',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="DataCentreStand.Channel.DataCentreStandardizationCharts">
        <title>Data Centre Standardization - Charts</title>
        <description>Shows a list of Data Centre Standardization Charts</description>
        <chart>DataCentreStand.Reports.HostByVendorPie</chart>
        <chart>DataCentreStand.Reports.WindowsVersionPie</chart>
        <chart>DataCentreStand.Reports.WindowsVersionEditionPie</chart>
        <chart>DataCentreStand.Reports.UnixTypePie</chart>
        <chart>DataCentreStand.Reports.UnixVersionPie</chart>
    </report-channel>

    <!--
    #########################################################################

        "DATA CENTRE STANDARDIZATION SOFTWARE" CHANNEL

    #########################################################################
    -->

    <report name="DataCentreStand.Reports.SoftwareByCategoryDist">
        <title>Software Distribution by Category</title>
        <description>
            Shows a distribution of the Software by Category. Software that is
            in more than Category will be counted more than once.
        </description>
        <kind>SoftwareInstance</kind>
        <show>
            explode(#Element:Maintainer:Pattern:Pattern.categories) AS '_|Software Category|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="DataCentreStand.Reports.SoftwareByCategoryDetail">
        <title>Software Detail by Category</title>
        <description>
            Shows a detail list of the Software by Category. Software that is in
            more than Category will be displayed more than once.
        </description>
        <kind>Pattern</kind>
        <where keyword="False" start="True">
            TRAVERSE Pattern:Maintainer:Element:SoftwareInstance
        </where>
        <show>
            explode(#Element:Maintainer:Pattern:Pattern.categories) AS "_|Software Category|_",
            name,
            product_version,
            version
        </show>
        <parameters>
            <parameter name="DataCentreStand_Reports_SoftwareByCategoryDetail_category">
                <title>Software Category</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Pattern
                             WHERE categories DEFINED
                               AND NODECOUNT(TRAVERSE Pattern:Maintainer:Element:SoftwareInstance) &gt; 0
                            SHOW explode(categories)
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>%(value)s IN categories</where>
            </parameter>
        </parameters>
    </report>

    <chart name="DataCentreStand.Reports.SoftwareByCategoryPie" default="pie">
        <title>Software Distribution by Category</title>
        <description>
            Shows a list of the Software by Category. Software that is in more
            than Category will be counted more than once.
        </description>
        <kind>SoftwareInstance</kind>
        <split>explode(#Element:Maintainer:Pattern:Pattern.categories) AS '_|Software Category|_'</split>
        <y-axis-title>_|Count|_</y-axis-title>
        <show>SUMMARY</show>
    </chart>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="DataCentreStand.Channel.DataCentreStandardizationSoftware">
        <title>Data Centre Standardization - Software</title>
        <description>Shows a list of Data Centre Standardization Software Reports</description>
        <report>DataCentreStand.Reports.SoftwareByCategoryDist</report>
        <report>DataCentreStand.Reports.SoftwareByCategoryDetail</report>
        <chart>DataCentreStand.Reports.SoftwareByCategoryPie</chart>
    </report-channel>

    <!--
    #########################################################################

        "HOST RESILIENCY - PATCH" CHANNEL

    #########################################################################
    -->

    <report name="Resiliency.Report.SolarisHostMissingPatch">
        <title>Find Solaris Hosts missing a specific patch</title>
        <description>Shows list of Solaris Hosts missing the specific patch provided</description>
        <kind>Host</kind>
        <where>
                os_type='Solaris'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_SolarisHostMissingPatch_name">
                <title>Patch Name</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.SolarisHostMissingPatchLike">
        <title>Find Solaris Hosts missing a patch</title>
        <description>
            Shows list of Solaris Hosts missing a patch. This report uses a
            partial match, if you have a specific patch use the Specific Patch
            report for efficiency.
        </description>
        <kind>Host</kind>
        <where>
                os_type='Solaris'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name HAS SUBSTRING %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_SolarisHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.SolarisHostMissingPatchDropDown">
        <title>Find Solaris Hosts missing a patch via drop down</title>
        <description>
            Shows list of Solaris Hosts missing a patch. This uses a drop down
            of all seen Solaris patches
        </description>
        <kind>Host</kind>
        <where>
                os_type='Solaris'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_SolarisHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Patch
                             WHERE os = 'Solaris'
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.HP-UXHostMissingPatch">
        <title>Find HP-UX Hosts missing a specific patch</title>
        <description>Shows list of HP-UX Hosts missing the specific patch provided</description>
        <kind>Host</kind>
        <where>
                os_type='HP-UX'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_HP-UXHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.HP-UXHostMissingPatchLike">
        <title>Find HP-UX Hosts missing a patch</title>
        <description>
            Shows list of HP-UX Hosts missing a patch. This report uses a
            partial match, if you have a specific patch use the Specific
            Patch report for efficiency.
        </description>
        <kind>Host</kind>
        <where>
                os_type='HP-UX'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name HAS SUBSTRING %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_HP-UXHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.HP-UXHostMissingPatchDropDown">
        <title>Find HP-UX Hosts missing a patch via drop down</title>
        <description>
            Shows list of HP-UX Hosts missing a patch. This uses a drop down of all seen HP-UX patches
        </description>
        <kind>Host</kind>
        <where>
                os_type='HP-UX'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_HP-UXHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Patch
                             WHERE os = 'HP-UX'
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.WindowsHostMissingPatch">
        <title>Find Windows Hosts missing a specific patch</title>
        <description>Shows list of Windows Hosts missing the specific patch provided</description>
        <kind>Host</kind>
        <where>
                os_type='Windows'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_WindowsHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.WindowsHostMissingPatchLike">
        <title>Find Windows Hosts missing a patch</title>
        <description>
            Shows list of Windows Hosts missing a patch. This report uses a
            partial match, if you have a specific patch use the Specific Patch
            report for efficiency.
        </description>
        <kind>Host</kind>
        <where>
                os_type='Windows'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name HAS SUBSTRING %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_WindowsHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.WindowsHostMissingPatchDropDown">
        <title>Find Windows Hosts missing a patch via drop down</title>
        <description>
            Shows list of Windows Hosts missing a patch. This uses a drop down
            of all seen Windows patches
        </description>
        <kind>Host</kind>
        <where>
                os_type='Windows'
            AND NODECOUNT(TRAVERSE Host:HostedSoftware:InstalledSoftware:Patch
                             WHERE name = %(opt_name)s) = 0
        </where>
        <parameters>
            <parameter name="Resiliency_Report_WindowsHostMissingPatch_name">
                <title>Patch Name Search</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Patch
                             WHERE os = 'Windows'
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Resiliency.Channel.HostResiliencyPatches">
        <title>Host Resiliency - Patches</title>
        <description>Shows a list of Resiliency Reports around Patches</description>
        <report>Resiliency.Report.SolarisHostMissingPatch</report>
        <report indent="true">Resiliency.Report.SolarisHostMissingPatchLike</report>
        <report indent="true">Resiliency.Report.SolarisHostMissingPatchDropDown</report>
        <report>Resiliency.Report.HP-UXHostMissingPatch</report>
        <report indent="true">Resiliency.Report.HP-UXHostMissingPatchLike</report>
        <report indent="true">Resiliency.Report.HP-UXHostMissingPatchDropDown</report>
        <report>Resiliency.Report.WindowsHostMissingPatch</report>
        <report indent="true">Resiliency.Report.WindowsHostMissingPatchLike</report>
        <report indent="true">Resiliency.Report.WindowsHostMissingPatchDropDown</report>
    </report-channel>

    <!--
    #########################################################################

        "HOST RESILIENCY - KERNEL" CHANNEL

    #########################################################################
    -->

    <report name="Resiliency.Report.WindowsServicePackDist">
        <title>Windows Service Pack Distribution</title>
        <description>Shows a distribution of Windows Service Packs</description>
        <kind>Host</kind>
        <where>os_class = 'Windows'</where>
        <show>
            os_version AS '_|Version|_',
            service_pack AS '_|Service Pack|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="Resiliency.Report.WindowsHostMissingServicePack">
        <title>Find Windows Hosts missing a Service Pack</title>
        <description>
            Shows list of Windows Hosts missing a Service Pack. You will need to
            provide the Windows Version and Service Pack number. The report will
            only consider hosts of that Windows Version.
        </description>
        <kind>Host</kind>
        <where>
                os_type = 'Windows'
            AND os_version = %(opt_version)s
            AND NOT service_pack = %(opt_sp)d
        </where>
        <show>
            name,
            os_version,
            service_pack
        </show>
        <parameters>
            <parameter name="Resiliency_Report_WindowsHostMissingServicePack_version">
                <title>Windows Version</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class = 'Windows'
                            SHOW os_version
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_version</key>
            </parameter>
            <parameter name="Resiliency_Report_WindowsHostMissingServicePack_sp">
                <title>Service Pack</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class = 'Windows'
                               AND service_pack DEFINED
                            SHOW service_pack
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>opt_sp</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.WindowsHostMinServicePack">
        <title>Find Windows Hosts without minimum Service Pack</title>
        <description>
            Shows list of Windows Hosts with a Service Pack less than the one
            specified. You will need to provide the Windows Version and Service
            Pack number. The report will only consider hosts of that Windows
            Version.
        </description>
        <kind>Host</kind>
        <where>
                os_type = 'Windows'
            AND os_version = %(opt_version)s
            AND service_pack &lt; %(opt_sp)d
        </where>
        <show>
            name,
            os_version,
            service_pack
        </show>
        <parameters>
            <parameter name="Resiliency_Report_WindowsHostMissingServicePack_version">
                <title>Windows Version</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class = 'Windows'
                            SHOW os_version
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_version</key>
            </parameter>
            <parameter name="Resiliency_Report_WindowsHostMissingServicePack_sp">
                <title>Service Pack</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class = 'Windows'
                               AND service_pack DEFINED
                            SHOW service_pack
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>opt_sp</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.UnixKernelDist">
        <title>UNIX Kernel Distribution</title>
        <description>Shows a distribution of UNIX Kernels. Includes FreeBSD and GNU/Linux.</description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <show>
            os AS '_|Discovered OS|_',
            kernel AS '_|Discovered Kernel|_'
            PROCESS WITH
                countUnique(0, 1)
        </show>
    </report>

    <report name="Resiliency.Report.UnixKernelSummary">
        <title>UNIX Kernel Summary</title>
        <description>Shows a summary of UNIX Kernels. Includes FreeBSD and GNU/Linux.</description>
        <kind>Host</kind>
        <where>os_class = 'UNIX'</where>
        <show>
            name,
            os,
            kernel
        </show>
        <parameters>
            <parameter name="Resiliency_Report_UnixKernelSummary_type">
                <title>UNIX Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type IS DEFINED
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.UnixKernelSearch">
        <title>UNIX Kernel Search</title>
        <description>Search for particular combinations of UNIX Type and Kernel</description>
        <where>os_class = 'UNIX'</where>
        <kind>Host</kind>
        <parameters>
            <parameter name="Resiliency_Report_UnixKernelSearch_type">
                <title>UNIX Type and Kernel</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: "os_type = %r AND kernel = %r" % tuple(x.split(' -+- '))</convert>
                    <escape>False</escape>
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class = 'UNIX'
                            SHOW #'%s -+- %s' (os_type, kernel)
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.UnixKernelFindHosts">
        <title>Find UNIX Hosts with a specific kernel</title>
        <description>Shows list of UNIX Hosts with a specific kernel</description>
        <kind>Host</kind>
        <where>os_class='UNIX'</where>
        <show>
            SUMMARY,
            kernel
        </show>
        <parameters>
            <parameter name="Resiliency_Report_UnixKernelFindHosts_kernel">
                <title>Kernel</title>
                <type name="TextField"/>
                <where>kernel = %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.UnixKernelFindHostsSearch">
        <title>Find UNIX Hosts with kernel</title>
        <description>
            Shows list of UNIX Hosts with a specific kernel. This report uses a
            partial match, if you have a specific patch use the Specific kernel
            report for efficiency.
        </description>
        <kind>Host</kind>
        <where>os_class='UNIX'</where>
        <show>
            SUMMARY,
            kernel
        </show>
        <parameters>
            <parameter name="Resiliency_Report_UnixKernelFindHosts_kernel">
                <title>Kernel</title>
                <type name="TextField"/>
                <where>kernel LIKE %(value)s</where>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Resiliency.Channel.HostResiliencyKernel">
        <title>Host Resiliency - Kernel</title>
        <description>Shows a list of Resiliency Reports around Kernel details</description>
        <report>Resiliency.Report.WindowsServicePackDist</report>
        <report indent="true">Resiliency.Report.WindowsHostMissingServicePack</report>
        <report indent="true">Resiliency.Report.WindowsHostMinServicePack</report>
        <report>Resiliency.Report.UnixKernelDist</report>
        <report indent="true">Resiliency.Report.UnixKernelSummary</report>
        <report indent="true">Resiliency.Report.UnixKernelSearch</report>
        <report indent="true">Resiliency.Report.UnixKernelFindHosts</report>
        <report indent="true">Resiliency.Report.UnixKernelFindHostsSearch</report>
    </report-channel>

    <!--
    #########################################################################

        "HOST SERVICES RESILIENCY" CHANNEL

    #########################################################################
    -->

    <report name="Resiliency.Report.HostPortSummary">
        <title>Summary of Hosts with service port open</title>
        <description>
            Shows a summary report of which Hosts have been seen with common
            service ports open. The report can be restricted to just the latest
            scan data for each Host, or all available scan data.
        </description>
        <kind>DiscoveredListeningPort</kind>
        <flags keyword="FALSE">%(opt_superseded)s</flags>
        <where>
            local_port = %(opt_port)d
            TRAVERSE Member:List:List:NetworkConnectionList
            TRAVERSE DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess
            TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:HostInfo
            TRAVERSE Primary:Inference:InferredElement:Host
        </where>
        <parameters>
            <parameter name="Resiliency_Report_HostPortSummary_port">
                <title>Service Port</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <options>
                        <option value="21">FTP</option>
                        <option value="22">SSH</option>
                        <option value="23">TELNET</option>
                        <option value="25">SMTP</option>
                        <option value="53">DNS</option>
                        <option value="69">TFTP</option>
                        <option value="80">HTTP</option>
                        <option value="110">POP3</option>
                        <option value="119">NNTP</option>
                        <option value="137">NETBIOS-NS</option>
                        <option value="143">IMAP</option>
                        <option value="161">SNMP</option>
                        <option value="443">HTTPS</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>opt_port</key>
            </parameter>
            <parameter name="Resiliency_Report_HostPortSummary_includeSuperseded">
                <title>Latest Scan Data Only (faster)</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|Yes|_</option>
                        <option value="FLAGS (include_destroyed)">_|No|_</option>
                    </options>
                </type>
                <key>opt_superseded</key>
            </parameter>
        </parameters>
    </report>

    <report name="Resiliency.Report.HostPortDetail">
        <title>Detail of Hosts with service port open</title>
        <description>
            Shows a detail report of which Hosts have been seen with common
            service ports open. The report runs over all available scan data and
            shows the port details, the number of connections seen, the time it
            was seen and basic host details.
        </description>
        <kind>DiscoveredListeningPort</kind>
        <where>local_port = %(opt_port)d</where>
        <show>
            local_port,
            local_ip_addr,
            protocol,
            NODECOUNT(TRAVERSE Member:List:List:NetworkConnectionList
                      TRAVERSE List:List:Member:DiscoveredNetworkConnection
                         WHERE local_port = %(opt_port)d) AS '_|Connections|_',
            #Member:List:List:NetworkConnectionList.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.discovery_starttime AS '_|Scan Time|_',
            #Member:List:List:NetworkConnectionList.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.
                #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS '_|Hostname|_',
            #Member:List:List:NetworkConnectionList.
                #DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.
                #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os  AS '_|OS|_'
        </show>
        <parameters>
            <parameter name="Resiliency_Report_HostPortDetail_port">
                <title>Service Port</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <options>
                        <option value="21">FTP</option>
                        <option value="22">SSH</option>
                        <option value="23">TELNET</option>
                        <option value="25">SMTP</option>
                        <option value="53">DNS</option>
                        <option value="69">TFTP</option>
                        <option value="80">HTTP</option>
                        <option value="110">POP3</option>
                        <option value="119">NNTP</option>
                        <option value="137">NETBIOS-NS</option>
                        <option value="143">IMAP</option>
                        <option value="161">SNMP</option>
                        <option value="443">HTTPS</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>opt_port</key>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Resiliency.Channel.HostResiliencyServices">
        <title>Host Resiliency - Services</title>
        <description>Shows a list of Resiliency Reports around Services</description>
        <report>Resiliency.Report.HostPortSummary</report>
        <report>Resiliency.Report.HostPortDetail</report>
    </report-channel>

    <!--
    #########################################################################

        "APPLICATION CHANGE IMPACT" CHANNEL

    #########################################################################
    -->

    <report name="Impact.Report.AppSwitch">
        <title>Applications that could be impacted by a Network Device</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Network Device. Set Include Hosted Virtual OSIs to also Include
            Applications running in Virtual OSIs.
        </description>
        <kind>NetworkDevice</kind>
        <where>
            name HAS SUBSTRING %(switch_name)s
            TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:PortInterface
            TRAVERSE PortInterface:NetworkLink:NetworkInterface:NetworkInterface
            TRAVERSE InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(switch_name)s AS '_|Network Device|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppSwitch_name">
                <title>Network Device Name</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>switch_name</key>
            </parameter>
            <parameter name="Impact_Report_AppSwitch_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppSwitchDropDown">
        <title>Applications that could be impacted by a Network Device via drop down</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Network Device. This report uses a drop down of all seen Network Devices. Set
            Include Hosted Virtual OSIs to also Include Applications running in
            Virtual OSIs.
        </description>
        <kind>NetworkDevice</kind>
        <where>
            name = %(switch_name)s
            TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:PortInterface
            TRAVERSE PortInterface:NetworkLink:NetworkInterface:NetworkInterface
            TRAVERSE InterfaceOfDevice:DeviceInterface:DeviceWithInterface:Host
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(switch_name)s AS '_|Network Device|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppSwitchDropDown_name">
                <title>Network Device Name</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH NetworkDevice
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>switch_name</key>
            </parameter>
            <parameter name="Impact_Report_AppSwitchDropDown_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppHost">
        <title>Applications that could be impacted by a Host</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Host. Set Include Hosted Virtual OSIs to also Include Applications
            running in Virtual OSIs hosted by this Host.
        </description>
        <kind>Host</kind>
        <where>
            name HAS SUBSTRING %(host_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(host_name)s AS '_|Host|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppHost_name">
                <title>Host Name</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>host_name</key>
            </parameter>
            <parameter name="Impact_Report_AppHost_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppHostDropDown">
        <title>Applications that could be impacted by a Host via drop down</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Host. This report uses a drop down of all seen Hosts. Set Include
            Hosted Virtual OSIs to also Include Applications running in Virtual
            OSIs hosted by this Host.
        </description>
        <kind>Host</kind>
        <where>
            name = %(host_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(host_name)s AS '_|Host|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppHostDropDown_name">
                <title>Host Name</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                            SHOW name
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>host_name</key>
            </parameter>
            <parameter name="Impact_Report_AppHostDropDown_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppHostModel">
        <title>Applications that could be impacted by a Host Model</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Host Model. Set Include Hosted Virtual OSIs to also Include
            Applications running in Virtual OSIs hosted by this Host Model.
        </description>
        <kind>Host</kind>
        <where>
            model HAS SUBSTRING %(model_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(model_name)s AS '_|Host Model|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppHostModel_name">
                <title>Host Model</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>model_name</key>
            </parameter>
            <parameter name="Impact_Report_AppHostModel_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                    <escape>escape</escape>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppHostModelDropDown">
        <title>Applications that could be impacted by a Host Model via drop down</title>
        <description>
            Shows list of Applications that could be impacted by changes to a
            Host Model. This report uses a drop down of all seen Host Models.
            Set Include Hosted Virtual OSIs to also Include Applications running
            in Virtual OSIs hosted by this Host Model.
        </description>
        <kind>Host</kind>
        <where>
            model = %(model_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(model_name)s AS '_|Host Model|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppHostDropDown_name">
                <title>Host Model</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                            SHOW model
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>model_name</key>
            </parameter>
            <parameter name="Impact_Report_AppHostModelDropDown_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppOS">
        <title>Applications that could be impacted by a OS</title>
        <description>
            Shows list of Applications that could be impacted by changes to an
            OS. Set Include Hosted Virtual OSIs to also Include Applications
            running in Virtual OSIs hosted by this OS.
        </description>
        <kind>Host</kind>
        <where>
            os HAS SUBSTRING %(os_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(os_name)s AS '_|OS|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppOS_name">
                <title>OS</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>os_name</key>
            </parameter>
            <parameter name="Impact_Report_AppOS_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppOSDropDown">
        <title>Applications that could be impacted by an OS via drop down</title>
        <description>
            Shows list of Applications that could be impacted by changes to an
            OS. This report uses a drop down of all seen OSs. Set Include Hosted
            Virtual OSIs to also Include Applications running in Virtual OSIs
            hosted by this OS.
        </description>
        <kind>Host</kind>
        <where>
            os = %(os_name)s
            %(opt_vm)s
            TRAVERSE Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(os_name)s AS '_|OS|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppOSDropDown_name">
                <title>OS</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH Host
                            SHOW os
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>os_name</key>
            </parameter>
            <parameter name="Impact_Report_AppOSDropDown_vm">
                <title>Include Hosted Virtual OSIs</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND Host:HostedSoftware:RunningSoftware:SoftwareInstance
                                       EXPAND HostContainer:HostContainment:ContainedHost:Host">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_vm</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppProduct">
        <title>Applications that could be impacted by a Software Product</title>
        <description>
            Shows list of Applications that could be impacted by changes to an
            Software Instance type. By default this report only searches
            directly modeled containment dependencies. Set Include Co Hosted
            Applications to include Applications that run on the same Host. Set
            Include Co Infered Software Instances to include Software Instances
            with primary inferences from the same source, for instance this
            would include Java SIs when searching for Tomcat SIs. Both these
            additions will cause the report to execute slower.
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            type HAS SUBSTRING %(type_name)s
            %(opt_coinf)s
            %(opt_cohost)s
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance
            TRAVERSE ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
            %(type_name)s AS '_|Software Instance Type|_',
            name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppProduct_name">
                <title>Software Instance Type</title>
                <type name="TextField">
                    <validate>NotEmpty</validate>
                </type>
                <key>type_name</key>
            </parameter>
            <parameter name="Impact_Report_AppProduct_cohost">
                <title>Include Co Hosted Applications</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND :HostedSoftware:Host:Host
                                       EXPAND Host:HostedSoftware::SoftwareInstance">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_cohost</key>
            </parameter>
            <parameter name="Impact_Report_AppProduct_coinf">
                <title>Include Co Inferred Software Instances</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="TRAVERSE InferredElement:Inference:Primary:
                                       TRAVERSE Primary:Inference:InferredElement:">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_coinf</key>
            </parameter>
        </parameters>
    </report>

    <report name="Impact.Report.AppProductDropDown">
        <title>Applications that could be impacted by a Software Product via drop down</title>
        <description>
            Shows list of Applications that could be impacted by changes to an
            Software Instance type. This report uses a drop down of all seen
            Software Instance Types. By default this report only searches
            directly modeled containment dependencies. Set Include Co Hosted
            Applications to include Applications that run on the same Host. Set
            Include Co Infered Software Instances to include Software Instances
            with primary inferences from the same source, for instance this
            would include Java SIs when searching for Tomcat SIs. Both these
            additions will cause the report to execute slower.
        </description>
        <kind>SoftwareInstance</kind>
        <where>
            type HAS SUBSTRING %(type_name)s
            %(opt_coinf)s
            %(opt_cohost)s
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:SoftwareInstance
            TRAVERSE ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
            EXPAND ContainedSoftware:SoftwareContainment:SoftwareContainer:BusinessApplicationInstance
        </where>
        <show>
           %(type_name)s AS '_|Software Instance Type|_',
           name AS '_|Application|_'
        </show>
        <parameters>
            <parameter name="Impact_Report_AppOSDropDown_name">
                <title>Software Instance Type</title>
                <type name="SelectField">
                    <all>False</all>
                    <options>
                        <query>
                            SEARCH SoftwareInstance
                            SHOW type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>type_name</key>
            </parameter>
            <parameter name="Impact_Report_AppProduct_cohost">
                <title>Include Co Hosted Applications</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="EXPAND :HostedSoftware:Host:Host
                                       EXPAND Host:HostedSoftware::SoftwareInstance">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_cohost</key>
            </parameter>
            <parameter name="Impact_Report_AppProduct_coinf">
                <title>Include Co Inferred Software Instances</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value=" ">_|No|_</option>
                        <option value="TRAVERSE InferredElement:Inference:Primary:
                                       TRAVERSE Primary:Inference:InferredElement:">_|Yes|_</option>
                    </options>
                </type>
                <key>opt_coinf</key>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Impact.Channel.ApplicationImpact">
        <title>Application Change Impact</title>
        <description>Shows a list of Change Impact Reports around Services</description>
        <report>Impact.Report.AppSwitch</report>
        <report indent="true">Impact.Report.AppSwitchDropDown</report>
        <report>Impact.Report.AppHost</report>
        <report indent="true">Impact.Report.AppHostDropDown</report>
        <report>Impact.Report.AppHostModel</report>
        <report indent="true">Impact.Report.AppHostModelDropDown</report>
        <report>Impact.Report.AppOS</report>
        <report indent="true">Impact.Report.AppOSDropDown</report>
        <report>Impact.Report.AppProduct</report>
        <report indent="true">Impact.Report.AppProductDropDown</report>
    </report-channel>

    <!--
    #########################################################################

        APPLICATION MAPPING CHANNEL

    #########################################################################
    -->

    <report name="ApplicationMapping.Report.GroupsWithFCDs">
        <title>Groups containing Functional Component Definitions</title>
        <description>
            Shows list of Groups that have Functional Component Defintions
            for Application Mapping - useful for exporting application
            mapping definitions.
        </description>
        <kind>Group</kind>
        <where>
            name IS DEFINED AND type &lt;&gt; 'sub' AND
            NODECOUNT(TRAVERSE List:List:Member:FunctionalComponentDefinition)
        </where>
        <order-by>
            name
        </order-by>
        <show>
           name
        </show>
    </report>

    <!--
    #########################################################################

        "HRD" CHANNEL

    #########################################################################
    -->

    <report name="HRD.Report.PowerCandidates">
        <title>Power Consumption Candidates</title>
        <description>
            Shows an analysis of Hosts detailing Power Consumption and showing
            Owners and Applications. Where data is not available default values
            will be used. Hosts with missing data can be included (using
            defaults), excluded or shown on their own for investigation.
        </description>
        <kind>Host</kind>
        <show>
            name,
            host_type,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            os_class,
            os_type,
            os_version,
            os_edition,
            (processor_speed OR %(DefaultSpeed)d) *
                defaultNumber((num_logical_processors OR num_processors),
                              %(DefaultCpu)d) AS 'MHz of Compute',
            (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts OR %(DefaultWatts)d) AS 'Watts',
            (processor_speed OR %(DefaultSpeed)d) *
                defaultNumber((num_logical_processors OR num_processors), %(DefaultCpu)d) /
                (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts OR %(DefaultWatts)d) AS 'MHz per Watt',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="HRD_Report_PowerCandidates_class">
                <title>OS Class</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class DEFINED
                            SHOW os_class
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_class = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_type">
                <title>OS Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type DEFINED
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_edition">
                <title>OS Edition</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_edition DEFINED
                            SHOW os_edition
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_edition = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultcpu">
                <title>Default CPU Count (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>2</default>
                    <options>
                        <option value="1">1 CPU</option>
                        <option value="2">2 CPUs</option>
                        <option value="4">4 CPUs</option>
                        <option value="8">8 CPUs</option>
                        <option value="16">16 CPUs</option>
                        <option value="24">24 CPUs</option>
                        <option value="32">32 CPUs</option>
                        <option value="48">48 CPUs</option>
                        <option value="56">56 CPUs</option>
                        <option value="64">64 CPUs</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultCpu</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultspeed">
                <title>Default CPU Speed (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>4</default>
                    <options>
                        <option value="500">0.5 GHz per CPU</option>
                        <option value="1000">1.0 GHz per CPU</option>
                        <option value="1500">1.5 GHz per CPU</option>
                        <option value="2000">2.0 GHz per CPU</option>
                        <option value="2500">2.5 GHz per CPU</option>
                        <option value="3000">3.0 GHz per CPU</option>
                        <option value="3500">3.5 GHz per CPU</option>
                        <option value="4000">4.0 GHz per CPU</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultSpeed</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultwatts">
                <title>Default Watts per CPU (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>1</default>
                    <options>
                        <option value="250">250 Watts per CPU</option>
                        <option value="500">500 Watts per CPU</option>
                        <option value="750">750 Watts per CPU</option>
                        <option value="1000">1000 Watts per CPU</option>
                        <option value="2000">2000 Watts per CPU</option>
                        <option value="4000">4000 Watts per CPU</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultWatts</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_excludewatts">
                <title>Hosts without Watts Data</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="NOT virtual">Include</option>
                        <option value="NOT virtual AND NODECOUNT(TRAVERSE Hardware:ReferenceData:ReferenceData:HardwareReferenceData) &gt; 0">Exclude</option>
                        <option value="NOT virtual AND NODECOUNT(TRAVERSE Hardware:ReferenceData:ReferenceData:HardwareReferenceData) = 0">Show Only</option>
                    </options>
                </type>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_excludecpu">
                <title>Hosts without Cpu Data</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="">Include</option>
                        <option value="(processor_speed AND num_logical_processors AND num_processors)">Exclude</option>
                        <option value="NOT (processor_speed AND num_logical_processors AND num_processors)">Show Only</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="HRD.Report.HeatCandidates">
        <title>Heat Production Candidates</title>
        <description>
            Shows an analysis of Hosts detailing Heat Output and showing Owners
            and Applications. Where data is not available default values will be
            used. Hosts with missing data can be included (using defaults),
            excluded or shown on their own for investigation.
        </description>
        <kind>Host</kind>
        <show>
            name,
            host_type,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            os_class,
            os_type,
            os_version,
            os_edition,
            (processor_speed OR %(DefaultSpeed)d) *
                defaultNumber((num_logical_processors OR num_processors), %(DefaultCpu)d) AS 'MHz of Compute',
            (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h OR %(DefaultBTUH)d) AS 'BTU/h',
            (processor_speed OR %(DefaultSpeed)d) *
                defaultNumber((num_logical_processors OR num_processors), %(DefaultCpu)d) /
                (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h OR %(DefaultBTUH)d) AS 'MHz per BTU/h',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
        <parameters>
            <parameter name="HRD_Report_PowerCandidates_class">
                <title>OS Class</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class DEFINED
                            SHOW os_class
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_class = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_type">
                <title>OS Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type DEFINED
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_edition">
                <title>OS Edition</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_edition DEFINED
                            SHOW os_edition
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_edition = %(value)s</where>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultcpu">
                <title>Default CPU Count (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>2</default>
                    <options>
                        <option value="1">1 CPU</option>
                        <option value="2">2 CPUs</option>
                        <option value="4">4 CPUs</option>
                        <option value="8">8 CPUs</option>
                        <option value="16">16 CPUs</option>
                        <option value="24">24 CPUs</option>
                        <option value="32">32 CPUs</option>
                        <option value="48">48 CPUs</option>
                        <option value="56">56 CPUs</option>
                        <option value="64">64 CPUs</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultCpu</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultspeed">
                <title>Default CPU Speed (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>4</default>
                    <options>
                        <option value="500">0.5 GHz per CPU</option>
                        <option value="1000">1.0 GHz per CPU</option>
                        <option value="1500">1.5 GHz per CPU</option>
                        <option value="2000">2.0 GHz per CPU</option>
                        <option value="2500">2.5 GHz per CPU</option>
                        <option value="3000">3.0 GHz per CPU</option>
                        <option value="3500">3.5 GHz per CPU</option>
                        <option value="4000">4.0 GHz per CPU</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultSpeed</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_defaultbtuh">
                <title>Default BTU/h per CPU (used if no data)</title>
                <type name="SelectField">
                    <all>False</all>
                    <convert>lambda x: int(x)</convert>
                    <default>1</default>
                    <options>
                        <option value="250">250 BTU/h per CPU</option>
                        <option value="500">500 BTU/h per CPU</option>
                        <option value="750">750 BTU/h per CPU</option>
                        <option value="1000">1000 BTU/h per CPU</option>
                        <option value="2000">2000 BTU/h per CPU</option>
                        <option value="4000">4000 BTU/h per CPU</option>
                    </options>
                    <validate>integer</validate>
                </type>
                <key>DefaultBTUH</key>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_excludebtu">
                <title>Hosts without BTU Data</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="NOT virtual">Include</option>
                        <option value="NOT virtual AND NODECOUNT(TRAVERSE Hardware:ReferenceData:ReferenceData:HardwareReferenceData) &gt; 0">Exclude</option>
                        <option value="NOT virtual AND NODECOUNT(TRAVERSE Hardware:ReferenceData:ReferenceData:HardwareReferenceData) = 0">Show Only</option>
                    </options>
                </type>
            </parameter>
            <parameter name="HRD_Report_PowerCandidates_excludecpu">
                <title>Hosts without Cpu Data</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="">Include</option>
                        <option value="(processor_speed AND num_logical_processors AND num_processors)">Exclude</option>
                        <option value="NOT (processor_speed AND num_logical_processors AND num_processors)">Show Only</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="HRD.Channel.PowerCandidates">
        <title>Hardware Analysis</title>
        <description>Allows the Hardware of the environment to be understood and managed</description>
        <report>HRD.Report.PowerCandidates</report>
        <report>HRD.Report.HeatCandidates</report>
    </report-channel>

    <!--
    #########################################################################

        "EOL" CHANNEL

    #########################################################################
    -->

    <report name="EOL.Report.SWEOL">
        <title>Software Product Lifecycle Analysis</title>
        <description>
            Shows an analysis of the End of Life, Support and Extended Support dates of software
        </description>
        <kind>SoftwareInstance</kind>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND
              formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND
              formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND
              formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            #:HostedSoftware:Host:Host.name,
            (#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked') AS 'Host Owner'
        </show>
        <parameters>
            <parameter name="EOL_Report_SWEOL_category">
                <title>Category</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Pattern
                             WHERE categories DEFINED
                               AND NODECOUNT(TRAVERSE Pattern:Maintainer:Element:SoftwareInstance) &gt; 0
                            SHOW explode(categories)
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>%(value)s IN #Element:Maintainer:Pattern:Pattern.categories</where>
            </parameter>
            <parameter name="EOL_Report_SWEOL_publisher">
                <title>Publisher</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Pattern
                             WHERE publishers DEFINED
                               AND NODECOUNT(TRAVERSE Pattern:Maintainer:Element:SoftwareInstance) &gt; 0
                            SHOW explode(publishers)
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>%(value)s IN #Element:Maintainer:Pattern:Pattern.publishers</where>
            </parameter>
            <parameter name="EOL_Report_SWEOL_EOL_time">
                <title>End of Life</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date - currentTime() &lt; 0 ))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date - currentTime() &lt; 157248000000000 ))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date - currentTime() &lt; 315360000000000 ))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date - currentTime() &lt; 630720000000000 ))">In 2 years</option>
                    </options>
                </type>
            </parameter>
            <parameter name="EOL_Report_SWEOL_EOS_time">
                <title>End of Support</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date - currentTime() &lt; 0))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date - currentTime() &lt; 157248000000000))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date - currentTime() &lt; 315360000000000))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date - currentTime() &lt; 630720000000000))">In 2 years</option>
                    </options>
                </type>
            </parameter>
            <parameter name="EOL_Report_SWEOL_EOES_time">
                <title>End of Extended Support</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 0))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 157248000000000))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 315360000000000))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 630720000000000))">In 2 years</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="EOL.Report.OSEOL">
        <title>OS Product Lifecycle Analysis</title>
        <description>
            Shows an analysis of the End of Life, Support and Extended Support
            dates of Operating Systems
        </description>
        <kind>Host</kind>
        <show>
            name,
            vendor,
            model,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND
              formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND
              formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND
              formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (#OwnedItem:Ownership::Person.name OR 'None Linked') AS 'Host Owner',
            (#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked') AS 'Applications'
        </show>
        <parameters>
            <parameter name="EOL_Report_OSEOL_class">
                <title>OS Class</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_class DEFINED
                            SHOW os_class
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_class = %(value)s</where>
            </parameter>
            <parameter name="EOL_Report_OSEOL_type">
                <title>OS Type</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_type DEFINED
                            SHOW os_type
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_type = %(value)s</where>
            </parameter>
            <parameter name="EOL_Report_OSEOL_edition">
                <title>OS Edition</title>
                <type name="SelectField">
                    <options>
                        <query>
                            SEARCH Host
                             WHERE os_edition DEFINED
                            SHOW os_edition
                            PROCESS WITH unique(1)
                        </query>
                    </options>
                </type>
                <where>os_edition = %(value)s</where>
            </parameter>
            <parameter name="EOL_Report_OSEOL_EOL_time">
                <title>End of Life</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date - currentTime() &lt; 0 ))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date - currentTime() &lt; 157248000000000 ))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date - currentTime() &lt; 315360000000000 ))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date - currentTime() &lt; 630720000000000 ))">In 2 years</option>
                    </options>
                </type>
            </parameter>
            <parameter name="EOL_Report_OSEOL_EOS_time">
                <title>End of Support</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date - currentTime() &lt; 0 ))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date - currentTime() &lt; 157248000000000 ))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date - currentTime() &lt; 315360000000000 ))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date - currentTime() &lt; 630720000000000 ))">In 2 years</option>
                    </options>
                </type>
            </parameter>
            <parameter name="EOL_Report_OSEOL_EOES_time">
                <title>End of Extended Support</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 0 ))">Exceeded</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 157248000000000 ))">In less than 6 months</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 315360000000000 ))">In a year</option>
                        <option value="(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND
                                       (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date - currentTime() &lt; 630720000000000 ))">In 2 years</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="EOL.Channel.EOL">
        <title>Product Lifecycle Analysis</title>
        <description>Allows the Product Lifecycle of the environment to be understood and managed</description>
        <report>EOL.Report.SWEOL</report>
        <report>EOL.Report.OSEOL</report>
    </report-channel>

    <!--
    #########################################################################

        "DATABASES" CHANNEL

    #########################################################################
    -->

    <report name="Databases.Reports.AllInstances">
        <title>All Databases Instances</title>
        <description>Show a list of all Databases Instances</description>
        <kind>SoftwareInstance</kind>
        <where>
               type HAS SUBWORD "database server"
            OR type IN ["Microsoft SQL Server", "Oracle Berkeley DB",
                        "Informix Dynamic Server", "Oracle Database Lite Mobile Server"]
        </where>
        <order-by>
            type,
            instance
        </order-by>
        <show>
            type,
            instance as "_|Identifier|_",
            product_version,
            #:HostedSoftware:Host:Host.name AS "_|Host|_"
        </show>
    </report>

    <report name="Databases.Reports.Oracle">
        <title>Oracle Instances</title>
        <description>Show a list of Oracle Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "Oracle Database Server"</where>
        <show>
            type,
            instance as "_|Identifier|_",
            product_version,
            edition,
            version,
            #:HostedSoftware:Host:Host.name AS "_|Host|_"
        </show>
    </report>

    <report name="Databases.Reports.Sybase">
        <title>Sybase Instances</title>
        <description>Show a list of Sybase Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type IN ["Sybase ASE Database Server", "Sybase ASE Database Server Cluster Edition"]</where>
        <show>
            type,
            instance as "_|Identifier|_",
            port as "Port",
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS "_|Host|_"
        </show>
    </report>

    <report name="Databases.Reports.SQLServer">
        <title>SQL Server Instances</title>
        <description>Show a list of SQL Server Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "Microsoft SQL Server"</where>
        <show>
            type,
            instance as "_|Identifier|_",
            port as "Port",
            product_version,
            edition,
            version,
            #:HostedSoftware:Host:Host.name AS "_|Host|_"
        </show>
    </report>

    <report name="Databases.Reports.MySQL">
        <title>MySQL Instances</title>
        <description>Show a list of MySQL Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "MySQL Database Server"</where>
        <show>
            type,
            port as "Port",
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS "_|Host|_"
        </show>
    </report>

    <report name="Databases.Reports.DB2">
        <title>DB2 Instances</title>
        <description>Show a list of DB2 Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "IBM DB2 Database Server"</where>
        <show>
            type,
            instance as "_|Instance|_",
            port as "Port",
            product_version,
            version,
            revision,
            service_pack,
            #:HostedSoftware:Host:Host.name AS "Host"
        </show>
    </report>

    <report name="Databases.Reports.PostgreSQL">
        <title>PostgreSQL Instances</title>
        <description>Show a list of PostgreSQL Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "PostgreSQL Database Server"</where>
        <show>
            type,
            port as "Port",
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS "Host"
        </show>
    </report>

    <report name="Databases.Reports.Informix">
        <title>Informix Instances</title>
        <description>Show a list of Informix Instances</description>
        <kind>SoftwareInstance</kind>
        <where>type = "Informix Dynamic Server"</where>
        <show>
            type,
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS "Host"
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Infrastructure.Channel.Databases">
        <title>Database Reports</title>
        <description>Shows a list of Database specific reports</description>
        <report>Databases.Reports.AllInstances</report>
        <report indent="true">Databases.Reports.Oracle</report>
        <report indent="true">Databases.Reports.Sybase</report>
        <report indent="true">Databases.Reports.SQLServer</report>
        <report indent="true">Databases.Reports.MySQL</report>
        <report indent="true">Databases.Reports.DB2</report>
        <report indent="true">Databases.Reports.PostgreSQL</report>
        <report indent="true">Databases.Reports.Informix</report>
    </report-channel>

    <!--
    #########################################################################

        "MODEL HEALTH" CHANNEL

    #########################################################################
    -->

    <report name="Infrastructure.Reports.EndpointIdentity">
        <title>Devices with Endpoint Identity Change</title>
        <description>
            Show a list of Host, NetworkDevice, MFPart or Printer nodes created because
            the identity of the node derived from it changed. The Previous node is no 
            longer actively being maintained and is aging out.
        </description>
        <flags>find_relationships</flags>
        <kind>EndpointIdentity</kind>
        <order-by>
            endpoint,
            creationTime(#) DESC
        </order-by>
        <show>
            friendlyTime(creationTime(#)) AS 'Identity Change Time',
            endpoint AS 'Endpoint',
            kind(#:Previous:.#) AS 'Previous Kind',
            nodeLink(#:Previous:.#InferredElement:Inference:Primary:DeviceInfo.#DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.#,
                     (friendlyTime(#:Previous:.#InferredElement:Inference:Primary:DeviceInfo.#DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.starttime) OR 'DDD Aged Out')) AS 'Last Update of Previous Identity',
            nodeLink(#:Previous:.#, #:Previous:.name) AS 'Previous Identity',
            nodeLink(#:Next:.#, #:Next:.name) AS 'Next Identity',
            nodeLink(#:Next:.#InferredElement:Inference:Primary:DeviceInfo.#DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.#,
                     (friendlyTime(#:Next:.#InferredElement:Inference:Primary:DeviceInfo.#DiscoveryResult:DiscoveryAccessResult:DiscoveryAccess:DiscoveryAccess.starttime) OR 'DDD Aged Out')) AS 'Last Update of Next Identity',
            kind(#:Next:.#) AS 'Next Kind'
        </show>
    </report>

    <report name="Infrastructure.Reports.HostRemovalThreshold">
        <title>Hosts near Removal Threshold</title>
        <description>
            Show a list of Host nodes that are near their removal thresholds and
            gives an approximate indication of the removal deadline
        </description>
        <kind>Host</kind>
        <with>
            value(getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') + age_count) AS scans,
            value( abs(last_update_success)/10000000 ) AS lus,
            value( (currentTime()/10000000) - getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (2 * 24 * 3600) ) AS time_threshold,
            value( ( getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (abs(last_update_success)/10000000) - (currentTime()/10000000) ) / 3600 ) AS time_to_doom
        </with>
        <where>
            (@scans &lt;= 2) AND (@lus &lt;= @time_threshold) AND (getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') &gt; 2) AND
            (getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') &gt; (2 * 24 * 3600) )
        </where>
        <show>
            name,
            os,
            (#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out') AS 'Last Successful IP',
            whenWasThat(last_update_success) AS 'Last Successful Scan',
            (age_count * -1) AS 'Consecutive Scan Failures',
            ( ( ( (@scans > 0) AND (@time_to_doom > 0) ) AND #'Eligible for removal in %d scans and %d hours' (@scans, @time_to_doom) )
            OR ( (@scans > 0) AND #'Eligible for removal in %d scans' (@scans) )
            OR ( (@time_to_doom > 0) AND #'Eligible for removal in %d hours' (@time_to_doom) ) )  AS "Removal Eligibility"
        </show>
    </report>

    <report name="Infrastructure.Reports.NetworkDeviceRemovalThreshold">
        <title>Network Devices near Removal Threshold</title>
        <description>
            Show a list of Network Device nodes that are near their removal thresholds and
            gives an approximate indication of the removal deadline
        </description>
        <kind>NetworkDevice</kind>
        <with>
            value(getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') + age_count) AS scans,
            value( abs(last_update_success)/10000000 ) AS lus,
            value( (currentTime()/10000000) - getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (2 * 24 * 3600) ) AS time_threshold,
            value( ( getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (abs(last_update_success)/10000000) - (currentTime()/10000000) ) / 3600 ) AS time_to_doom
        </with>
        <where>
            (@scans &lt;= 2) AND (@lus &lt;= @time_threshold) AND (getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') &gt; 2) AND
            (getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') &gt; (2 * 24 * 3600) )
        </where>
        <show>
            name,
            os,
            (#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out') AS 'Last Successful IP',
            whenWasThat(last_update_success) AS 'Last Successful Scan',
            (age_count * -1) AS 'Consecutive Scan Failures',
            ( ( ( (@scans > 0) AND (@time_to_doom > 0) ) AND #'Eligible for removal in %d scans and %d hours' (@scans, @time_to_doom) )
            OR ( (@scans > 0) AND #'Eligible for removal in %d scans' (@scans) )
            OR ( (@time_to_doom > 0) AND #'Eligible for removal in %d hours' (@time_to_doom) ) )  AS "Removal Eligibility"
        </show>
    </report>

    <report name="Infrastructure.Reports.PrinterRemovalThreshold">
        <title>Printers near Removal Threshold</title>
        <description>
            Show a list of Printer nodes that are near their removal thresholds and
            gives an approximate indication of the removal deadline
        </description>
        <kind>Printer</kind>
        <with>
            value(getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') + age_count) AS scans,
            value( abs(last_update_success)/10000000 ) AS lus,
            value( (currentTime()/10000000) - getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (2 * 24 * 3600) ) AS time_threshold,
            value( ( getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (abs(last_update_success)/10000000) - (currentTime()/10000000) ) / 3600 ) AS time_to_doom
        </with>
        <where>
            (@scans &lt;= 2) AND (@lus &lt;= @time_threshold) AND (getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') &gt; 2) AND
            (getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') &gt; (2 * 24 * 3600) )
        </where>
        <show>
            name,
            os,
            (#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out') AS 'Last Successful IP',
            whenWasThat(last_update_success) AS 'Last Successful Scan',
            (age_count * -1) AS 'Consecutive Scan Failures',
            ( ( ( (@scans > 0) AND (@time_to_doom > 0) ) AND #'Eligible for removal in %d scans and %d hours' (@scans, @time_to_doom) )
            OR ( (@scans > 0) AND #'Eligible for removal in %d scans' (@scans) )
            OR ( (@time_to_doom > 0) AND #'Eligible for removal in %d hours' (@time_to_doom) ) )  AS "Removal Eligibility"
        </show>
    </report>    

    <report name="Infrastructure.Reports.MFPartRemovalThreshold">
        <title>MFParts near Removal Threshold</title>
        <description>
            Show a list of MFPart nodes that are near their removal thresholds and
            gives an approximate indication of the removal deadline
        </description>
        <kind>MFPart</kind>
        <with>
            value(getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') + age_count) AS scans,
            value( abs(last_update_success)/10000000 ) AS lus,
            value( (currentTime()/10000000) - getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (2 * 24 * 3600) ) AS time_threshold,
            value( ( getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') + (abs(last_update_success)/10000000) - (currentTime()/10000000) ) / 3600 ) AS time_to_doom
        </with>
        <where>
            (@scans &lt;= 2) AND (@lus &lt;= @time_threshold) AND (getOption('MIN_FAILED_ACCESSES_BEFORE_DESTROY') &gt; 2) AND
            (getOption('MIN_SECONDS_SINCE_ACCESS_SUCCESS_BEFORE_DESTROY') &gt; (2 * 24 * 3600) )
        </where>
        <show>
            name,
            os,
            (#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out') AS 'Last Successful IP',
            whenWasThat(last_update_success) AS 'Last Successful Scan',
            (age_count * -1) AS 'Consecutive Scan Failures',
            ( ( ( (@scans > 0) AND (@time_to_doom > 0) ) AND #'Eligible for removal in %d scans and %d hours' (@scans, @time_to_doom) )
            OR ( (@scans > 0) AND #'Eligible for removal in %d scans' (@scans) )
            OR ( (@time_to_doom > 0) AND #'Eligible for removal in %d hours' (@time_to_doom) ) )  AS "Removal Eligibility"
        </show>
    </report>


    <report name="Infrastructure.Reports.NewSoftware">
        <title>Newly Discovered Software</title>
        <description>Report to show new Software Instances found in the given period</description>
        <kind>SoftwareInstance</kind>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            whenWasThat(creationTime(#)) AS 'Created',
            SUMMARY
        </show>
        <parameters>
            <parameter name="NewSoftware_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.NewPackage">
        <title>Newly Discovered Packages</title>
        <description>
            Report to show new Packages found in the environment in the given
            period. This is an intensive report and may take some time to run.
        </description>
        <kind>Package</kind>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            whenWasThat(creationTime(#)) AS 'Created',
            SUMMARY,
            queryLink(#'LOOKUP &quot;%s&quot; TRAVERSE InstalledSoftware:HostedSoftware:Host:Host' (#id),
                      NODECOUNT(TRAVERSE InstalledSoftware:HostedSoftware:Host:Host)) AS 'Installed on n Hosts'
        </show>
        <parameters>
            <parameter name="NewPackage_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.NewPackageLink">
        <title>New Packages discovered on Hosts</title>
        <description>
            Report to show new links between Hosts and Packages in the given
            period. This is an intensive report and may take some time to run.
        </description>
        <kind>Package</kind>
        <where keyword="False">
            STEP IN InstalledSoftware:HostedSoftware
              WHERE kind(#:Host:.#) = 'Host'
                AND %(time_clause)s
        </where>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            whenWasThat(creationTime(#)) AS 'Created',
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.name) AS 'Package Name',
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.version) AS 'Package Version',
            nodeLink(#:InstalledSoftware:Package.#, #:InstalledSoftware:Package.os) AS 'Package OS',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.arch OR '')) AS 'Package Arch',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.description OR '')) AS 'Package Description',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.pkgname OR '')) AS 'Package pkgname',
            nodeLink(#:Host:Host.#, #:Host:Host.name) AS 'Host Name'
        </show>
        <parameters>
            <parameter name="NewPackageLink_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
                <key>time_clause</key>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.NewPatch">
        <title>Newly Discovered Patches</title>
        <description>
            Report to show new Patches found in the environment in the given
            period. This is an intensive report and may take some time to run.
        </description>
        <kind>Patch</kind>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            whenWasThat(creationTime(#)) AS 'Created',
            SUMMARY,
            queryLink(#'LOOKUP &quot;%s&quot; TRAVERSE InstalledSoftware:HostedSoftware:Host:Host' (#id),
                      NODECOUNT(TRAVERSE InstalledSoftware:HostedSoftware:Host:Host)) AS 'Installed on n Hosts'
        </show>
        <parameters>
            <parameter name="NewPatch_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
            </parameter>
        </parameters>
    </report>

    <report name="Infrastructure.Reports.NewPatchLink">
        <title>New Patches discovered on Hosts</title>
        <description>
            Report to show new links between Hosts and Patches in the given
            period. This is an intensive report and may take some time to run.
        </description>
        <kind>Patch</kind>
        <where keyword="False">
            STEP IN InstalledSoftware:HostedSoftware
              WHERE kind(#:Host:.#) = 'Host'
                AND %(time_clause)s
        </where>
        <order-by>creationTime(#) DESC</order-by>
        <show>
            whenWasThat(creationTime(#)) AS 'Created',
            nodeLink(#:InstalledSoftware:Patch.#, #:InstalledSoftware:Patch.name) AS 'Patch Name',
            nodeLink(#:InstalledSoftware:Patch.#, #:InstalledSoftware:Patch.version) AS 'Patch Version',
            nodeLink(#:InstalledSoftware:Patch.#, #:InstalledSoftware:Patch.os) AS 'Patch OS',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.arch OR '')) AS 'Package Arch',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.description OR '')) AS 'Package Description',
            nodeLink(#:InstalledSoftware:Package.#, (#:InstalledSoftware:Package.pkgname OR '')) AS 'Package pkgname',
            nodeLink(#:Host:Host.#, #:Host:Host.name) AS 'Host Name'
        </show>
        <parameters>
            <parameter name="NewPatchLink_interval">
                <title>Created During</title>
                <type name="SelectField">
                    <all>False</all>
                    <escape>False</escape>
                    <options>
                        <option value="createdDuring(#, currentTime() - (1 * 864000000000), currentTime())">0-1 day</option>
                        <option value="createdDuring(#, currentTime() - (2 * 864000000000), currentTime() - (1 * 864000000000))">1-2 days</option>
                        <option value="createdDuring(#, currentTime() - (3 * 864000000000), currentTime() - (2 * 864000000000))">2-3 days</option>
                        <option value="createdDuring(#, currentTime() - (4 * 864000000000), currentTime() - (3 * 864000000000))">3-4 days</option>
                        <option value="createdDuring(#, currentTime() - (5 * 864000000000), currentTime() - (4 * 864000000000))">4-5 days</option>
                        <option value="createdDuring(#, currentTime() - (6 * 864000000000), currentTime() - (5 * 864000000000))">5-6 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime() - (6 * 864000000000))">6-7 days</option>
                        <option value="createdDuring(#, currentTime() - (7 * 864000000000), currentTime())">0-1 week</option>
                        <option value="createdDuring(#, currentTime() - (14 * 864000000000), currentTime() - (7 * 864000000000))">1-2 weeks</option>
                        <option value="createdDuring(#, currentTime() - (28 * 864000000000), currentTime() - (14 * 864000000000))">2-4 weeks</option>
                    </options>
                </type>
                <key>time_clause</key>
            </parameter>
        </parameters>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Infrastructure.Channel.ModelNews">
        <title>New Entities</title>
        <description>Collection of reports to show newly discovered Hosts, Software and Packages</description>
        <report>Infrastructure.Reports.NewHosts</report>
        <report>Infrastructure.Reports.NewSoftware</report>
        <report>Infrastructure.Reports.NewPackage</report>
        <report>Infrastructure.Reports.NewPackageLink</report>
        <report>Infrastructure.Reports.NewPatch</report>
        <report>Infrastructure.Reports.NewPatchLink</report>
        <report>Infrastructure.Reports.PackageLink</report>
    </report-channel>

    <report-channel name="Infrastructure.Channel.ModelHealth">
        <title>Model Health</title>
        <description>Collection of reports on the state of the model</description>
        <report>Infrastructure.Reports.EndpointIdentity</report>
        <report>Infrastructure.Reports.HostRemovalThreshold</report>
        <report>Infrastructure.Reports.NetworkDeviceRemovalThreshold</report>
        <report>Infrastructure.Reports.MFPartRemovalThreshold</report>
        <report>Infrastructure.Reports.PrinterRemovalThreshold</report>
        <report>Discovery.Report.DiscoveryConditionsHost</report>
        <report>Virtualization.Reports.UnLinkedVirtualFromPhysical</report>
        <report>Virtualization.Reports.UnLinkedVirtualFromVirtual</report>
    </report-channel>

    <!--
    #########################################################################

        "COMMON REPORTS" CHANNEL

    #########################################################################
    -->

    <report-channel name="Reports.Channel.CommonReports">
        <title>Common Reports</title>
        <description>Common Reports</description>
        <report>Infrastructure.Report.Packages.WhereInstalled</report>
        <report>Infrastructure.Report.Patches.WhereInstalled</report>
    </report-channel>

    <!--
    #########################################################################

        SUMMARY CHANNELS FOR DASHBOARDS

    #########################################################################
    -->

    <summary-channel name="Applications.Channel.Summary">
        <title>Application Summary</title>
        <description>_|Shows a summary of Applications|_</description>
        <image>applications</image>
        <kind-count>BusinessApplicationInstance</kind-count>
        <kind-count>FunctionalComponent</kind-count>
        <kind-count>SoftwareInstance</kind-count>
        <kind-count>SoftwareComponent</kind-count>
    </summary-channel>

    <summary-channel name="Default.Channel.Summary">
        <title>Quick View</title>
        <description>_|Shows a short summary of the IT estate|_</description>
        <image>infrastructure</image>
        <kind-count>Host</kind-count>
        <kind-count>Cluster</kind-count>
        <kind-count>HostContainer</kind-count>
        <kind-count>NetworkDevice</kind-count>
        <kind-count>Printer</kind-count>
        <kind-count>Mainframe</kind-count>
        <kind-count>MFPart</kind-count>
        <kind-count>BusinessApplicationInstance</kind-count>
        <kind-count>SoftwareInstance</kind-count>
        <kind-count>SoftwareComponent</kind-count>
        <kind-count>RuntimeEnvironment</kind-count>
        <kind-count>DatabaseDetail</kind-count>
        <kind-count>Package</kind-count>
        <kind-count>Location</kind-count>
        <kind-count>OrganisationalUnit</kind-count>
    </summary-channel>

    <summary-channel name="Discovery.Channel.Summary">
        <title>Directly Discovered Data Index</title>
        <description>_|Shows an index of all Directly Discovered Data items|_</description>
        <image>discovery</image>
        <kind-count>DiscoveryRun</kind-count>
        <kind-count>DiscoveryAccess</kind-count>
        <kind-count>DeviceInfo</kind-count>
        <kind-count>HostInfo</kind-count>
        <kind-count>DiscoveryCondition</kind-count>
        <kind-count>DiscoveredFQDN</kind-count>
        <kind-count>DiscoveredFile</kind-count>
        <kind-count>DiscoveredHBA</kind-count>
        <kind-count>DiscoveredListeningPort</kind-count>
        <kind-count>DiscoveredNetworkConnection</kind-count>
        <kind-count>DiscoveredNetworkInterface</kind-count>
        <kind-count>DiscoveredPackages</kind-count>
        <kind-count>DiscoveredPatches</kind-count>
        <kind-count>DiscoveredProcess</kind-count>
        <kind-count>DiscoveredFileSystem</kind-count>
        <kind-count>DiscoveredWMIQuery</kind-count>
        <kind-count>DiscoveredCommandResult</kind-count>
        <kind-count>DiscoveredRegistryValue</kind-count>
        <kind-count>DiscoveredSNMP</kind-count>
        <kind-count>DiscoveredSNMPTable</kind-count>
        <kind-count>DirectoryListing</kind-count>
        <kind-count>DiscoveredMainframe</kind-count>
        <kind-count>DiscoveredMFPart</kind-count>
    </summary-channel>

    <summary-channel name="Infrastructure.Channel.Summary">
        <title>Infrastructure Summary</title>
        <description>_|Shows a summary of infrastructure items|_</description>
        <image>infrastructure</image>
        <kind-count>Host</kind-count>
        <kind-count>Cluster</kind-count>
        <kind-count>HostContainer</kind-count>
        <kind-count>NetworkDevice</kind-count>
        <kind-count>Printer</kind-count>
        <kind-count>Mainframe</kind-count>
        <kind-count>MFPart</kind-count>
        <kind-count>SoftwareInstance</kind-count>
        <kind-count>SoftwareComponent</kind-count>
        <kind-count>RuntimeEnvironment</kind-count>
        <kind-count>DatabaseDetail</kind-count>
        <kind-count>Package</kind-count>
        <kind-count>Patch</kind-count>
        <kind-count>FileSystem</kind-count>
        <kind-count>Subnet</kind-count>
        <kind-count>Location</kind-count>
        <kind-count>OrganisationalUnit</kind-count>
    </summary-channel>

    <!--
#################################
#### Software Chart Channels ####
#################################-->

    <chart-multi-channel name="Channel.SWDBVersion" default="column_nolegend">
        <title>Database versions</title>
        <description>
            Number and version of all the Database instances
        </description>
        <split>type</split>
        <split>(product_version or 'Unknown')</split>
        <kind>Pattern</kind>
        <where>
            'Relational Database Management Systems' in categories
            TRAVERSE Pattern:Maintainer:Element:SoftwareInstance
        </where>
        <show>SUMMARY</show>
    </chart-multi-channel>

    <chart-channel name="Channel.SWCategory" default="pie">
        <title>Software Products By Category</title>
        <description>Shows a list of the Software by Category. Software that is in more than one Category will be counted more than once</description>
        <split>explode(#Element:Maintainer:Pattern:Pattern.categories) AS 'Software Category'</split>
        <kind>SoftwareInstance</kind>
        <show>
            summary,
            #Element:Maintainer:Pattern:Pattern.categories AS 'Software Category'
        </show>
    </chart-channel>

    <chart-channel name="Channel.SWPublisher" default="pie">
        <title>Software Products By Publisher</title>
        <description>Shows a list of the Software by Publisher</description>
        <split>(publisher or join(#Element:Maintainer:Pattern:Pattern.publishers, ",")) AS 'Software Publisher'</split>
        <kind>SoftwareInstance</kind>
        <show>
            summary,
            (publisher or join(#Element:Maintainer:Pattern:Pattern.publishers, ",")) AS 'Software Publisher'
        </show>
    </chart-channel>

    <!--
###########################
#### OS Chart Channels ####
###########################-->

    <time-series-channel name="Channel.OSUNIX" time-series="7" default="column">
        <title>UNIX Operating Systems</title>
        <description>Shows a count of Hosts for each UNIX OS</description>
        <split>os_type as "OS Version"</split>
        <kind>Host</kind>
        <where>os_class = "UNIX"</where>
        <order-by>os_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <time-series-channel name="Channel.OSWindows" time-series="7">
        <title>Windows Operating Systems</title>
        <description>Shows a count of Hosts for each Windows version</description>
        <split>os_version as "OS Version"</split>
        <kind>Host</kind>
        <where>os_type = "Windows"</where>
        <order-by>os_version</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <!--
######################################
#### Virtualzation Chart Channels ####
######################################-->

    <time-series-channel name="Channel.HWVirtualVsReal" time-series="7">
        <title>Virtual vs. Physical</title>
        <description>What's virtual and what's not in the environment</description>
        <split>booleanLabels(virtual, "Virtual", "Not Virtual", "Not Virtual")</split>
        <kind>Host</kind>
        <order-by>virtual</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <chart-channel name="Channel.VirtualDistribution" default="pie">
        <title>Virtualization Technologies</title>
        <description>Show the various virtualization technologies present in the estate</description>
        <split>(#ContainedHost:HostContainment:HostContainer:SoftwareInstance.type OR 'Unlinked') AS 'Virtualization Technology'</split>
        <kind>Host</kind>
        <where>virtual</where>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (#ContainedHost:HostContainment:HostContainer:SoftwareInstance.type OR 'Unlinked') AS 'Virtualization Technology',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-multi-channel name="Channel.OSvsVirtualized">
        <!-- <chart-multi-channel name="Channel.WindowsOSvsVirtualized"> -->
        <!-- name not changed so that existing dashboards not disrupted see bug 10723 -->
        <title>UNIX OS Virtualization</title>
        <description>Shows how much of each UNIX OS is virtualized</description>
        <split>os_type as "OS Version"</split>
        <split>booleanLabels(virtual, "Virtual", "Not Virtual", "Not Virtual")</split>
        <kind>Host</kind>
        <where>os_class = "UNIX"</where>
        <order-by>os_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-multi-channel name="Channel.WindowsOSvsVirtualized">
        <title>Windows OS Virtualization</title>
        <description>Shows how much of each Windows OS is virtualized</description>
        <split>#"%s %s" (os_version, os_edition) AS 'Windows Version'</split>
        <split>booleanLabels(virtual, "Virtual", "Not Virtual", "Not Virtual")</split>
        <kind>Host</kind>
        <where>os_type = "Windows"</where>
        <order-by>#"%s %s" (os_version, os_edition)</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <!--
#################################
#### Hardware Chart Channels ####
#################################-->

    <time-series-channel name="Channel.HWHostOverTime" time-series="7">
        <title>Host count</title>
        <description>
            Evolution of the number of discovered hosts over time
        </description>
        <kind>Host</kind>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <time-series-channel name="Channel.HWHostOSTypeOverTime" time-series="7" default="pie">
        <title>Host OS distribution</title>
        <description>
            Evolution of OS Type in discovered Hosts over time
        </description>
        <split>os_type</split>
        <kind>Host</kind>
        <order-by>os_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <time-series-channel name="Channel.HWHostTypeOverTime" time-series="7" default="pie">
        <title>Hosts By Type</title>
        <description>
            Evolution of Host Type in discovered Hosts over time
        </description>
        <split>host_type</split>
        <kind>Host</kind>
        <order-by>host_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <chart-channel name="Channel.HWHostRamOverTime" default="column">
        <title>Host RAM distribution in GB</title>
        <description>Host RAM distribution in GB</description>
        <split>
            bin(
                ram/1024,
                [               1,      2,        4,        8,        16,        32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more'])
        </split>
        <kind>Host</kind>
        <where>ram IS DEFINED</where>
        <order-by>ram</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-multi-channel name="Channel.HWHostRamTypeOverTime" default="column">
        <title>Host Type by RAM in GB</title>
        <description>Host Type vs RAM</description>
        <split>
            bin(ram/1024,
                [               1,      2,        4,        8,        16,         32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'RAM'
        </split>
        <split>host_type</split>
        <kind>Host</kind>
        <where>ram IS DEFINED</where>
        <order-by>
            ram,
            host_type
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-channel name="Channel.HWCPUPower" default="pie">
        <title>Host Compute Power</title>
        <description>Uses the CPU speed multiplied by the number of logical cores to classify Hosts</description>
        <split>bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),[2020, 8000], ["Small Compute", "Medium Compute", "Large Compute"])</split>
        <kind>Host</kind>
        <where>NOT virtual AND processor_speed IS DEFINED</where>
        <order-by>
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <time-series-channel name="Channel.HWHostVendorOverTime" time-series="10" default="pie">
        <title>Hosts By Vendor</title>
        <description>
            Evolution of discovered Hosts over time by vendor
        </description>
        <split>vendor</split>
        <kind>Host</kind>
        <where>NOT virtual</where>
        <order-by>vendor</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <chart-multi-channel name="Channel.HWCpuSpeed">
        <title>Host CPU speed and count</title>
        <description>Speed and number of CPUs in the estate</description>
        <split>
            bin(processor_speed,
                [            1000,        1500,        1800,        2500,        3010],
                ['Less than 1Ghz', '1-1.5 Ghz', '1.5-2 Ghz', '2-2.5 Ghz', '2.5-3 Ghz', 'More than 3Ghz']) AS 'CPU Speed'
        </split>
        <split>
            formatNumber(num_logical_processors, "1 logical CPU", "%d logical CPUs", "Unknown number of CPUs")
        </split>
        <kind>Host</kind>
        <where>
                NOT virtual
            AND processor_speed
        </where>
        <order-by>
            processor_speed,
            num_logical_processors
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-multi-channel name="Channel.HWCpupowerRam">
        <title>Host Compute Power and RAM</title>
        <description>
            Speed x number of CPUs vs RAM in the estate.
        </description>
        <split>
            bin(ram/1024,
                [               1,      2,        4,        8,       16,          32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'RAM'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [           2020,             8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>Host</kind>
        <where>
                NOT virtual
            AND processor_speed IS DEFINED
            AND ram IS DEFINED
        </where>
        <order-by>
            ram,
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <!--
################################
#### Network Chart Channels ####
################################-->

    <chart-channel name="Channel.HWConnections" default="column">
        <title>Average number of Network Connections</title>
        <description>Averages the number of Network Connections seen per scan over all available DDD for a host.</description>
        <split>bin(@con_average,[10,50,100,500],['1 - 10','10 - 50','50 - 100','100 - 500','500 and more'])</split>
        <kind>Host</kind>
        <with>
            value((
                abs(
                    NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess
                              TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
                              TRAVERSE List:List:Member:DiscoveredNetworkConnection)
                    /
                    (NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess) OR 1)
                )
                OR 'Unknown')
            ) AS con_average
        </with>
        <order-by>@con_average</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess) AS 'Available Scans',
            @con_average AS 'Average Network Connections',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.HWPorts" default="column">
        <title>Average number of Listening Ports</title>
        <description>Averages the number of Listening Ports seen per scan over all available DDD for a host.</description>
        <split>bin(@port_average,[10,50,100,500],['1 - 10','10 - 50','50 - 100','100 - 500','500 and more'])</split>
        <kind>Host</kind>
        <with>
            value((
                abs(
                    NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess
                              TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:NetworkConnectionList
                              TRAVERSE List:List:Member:DiscoveredListeningPort)
                    /
                    (NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess) OR 1)
                )
                OR 'Unknown')
            ) AS port_average
        </with>
        <order-by>@port_average</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            NODECOUNT(TRAVERSE FLAGS(include_destroyed) InferredElement:Inference:Associate:DiscoveryAccess) AS 'Available Scans',
            @port_average AS 'Average Listening Ports',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.HWHostInterfacesOverTime" default="column">
        <title>Hosts By Network Interface Count</title>
        <description>Interface count of Discovered hosts</description>
        <split>bin(NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface),[1,2,3,5,10,30])</split>
        <kind>Host</kind>
        <order-by>
            NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface)
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            NODECOUNT(TRAVERSE DeviceWithInterface:DeviceInterface:InterfaceOfDevice:NetworkInterface) AS 'Network Interface',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <!--
#################################
#### Product Oracle Channels ####
#################################-->

    <chart-multi-channel name="Channel.SWOracleCpupowerRam">
        <title>Servers running Oracle: Compute Power and RAM</title>
        <description>Speed x number of CPUs vs RAM of Oracle Servers</description>
        <split>
            bin(ram/1024,
                [               1,      2,        4,        8,        16,         32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'RAM'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [           2020,             8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>SoftwareInstance</kind>
        <where>
            type='Oracle Database Server'
            TRAVERSE :HostedSoftware:Host:Host
               WHERE processor_speed
        </where>
        <order-by>
            ram,
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-multi-channel name="Channel.SWOracleVersion" default="column_nolegend">
        <title>Oracle Versions</title>
        <description>Product and Full version of all Oracle instances</description>
        <split>(product_version or 'Unknown') AS 'Version'</split>
        <split>(version or 'Unknown')</split>
        <kind>SoftwareInstance</kind>
        <where>type='Oracle Database Server'</where>
        <order-by>
            product_version,
            version
        </order-by>
        <show>
            type,
            name,
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS 'Host'
        </show>
    </chart-multi-channel>

    <chart-channel name="Channel.SWOracleHostOSTypeOverTime" default="pie">
        <title>Servers running Oracle: By Operating System</title>
        <description>Evolution of OS Type in Oracle Servers over time</description>
        <split>os_type</split>
        <kind>SoftwareInstance</kind>
        <where>type='Oracle Database Server' TRAVERSE :HostedSoftware:Host:Host</where>
        <order-by>os_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.SWOracleVirtualVsReal" default="pie">
        <title>Servers running Oracle: Virtual vs. Physical</title>
        <description>Which Oracle Servers are virtual and which are not in the environment</description>
        <split>booleanLabels(virtual, "Virtual", "Not Virtual", "Not Virtual")</split>
        <kind>SoftwareInstance</kind>
        <where>type='Oracle Database Server' TRAVERSE :HostedSoftware:Host:Host</where>
        <order-by>virtual</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <!--
#################################
#### Product Apache Channels ####
#################################-->

    <chart-multi-channel name="Channel.SWApacheCpupowerRam">
        <title>Servers running Apache: Compute Power and RAM</title>
        <description>
            Speed x number of CPUs vs RAM of Apache Webserver Servers.
        </description>
        <split>
            bin(ram/1024,
                [               1,      2,        4,        8,        16,         32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'RAM'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [           2020,             8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>SoftwareInstance</kind>
        <where>
            type='Apache Webserver'
            TRAVERSE :HostedSoftware:Host:Host
               WHERE processor_speed
        </where>
        <order-by>
            ram,
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-multi-channel name="Channel.SWApacheVersion" default="column_nolegend">
        <title>Apache Webserver Versions</title>
        <description>
            Product and Full version of all Apache Webserver instances.
        </description>
        <split>(product_version or 'Unknown') AS 'Version'</split>
        <split>(version or 'Unknown')</split>
        <kind>SoftwareInstance</kind>
        <where>type='Apache Webserver'</where>
        <order-by>
            product_version,
            version
        </order-by>
        <show>
            type,
            name,
            product_version,
            version,
            #:HostedSoftware:Host:Host.name AS 'Host'
        </show>
    </chart-multi-channel>

    <chart-channel name="Channel.SWApacheHostOSTypeOverTime" default="pie">
        <title>Servers running Apache: By Operating System</title>
        <description>Evolution of OS Type in Apache Webserver Servers over time</description>
        <split>os_type</split>
        <kind>SoftwareInstance</kind>
        <where>type='Apache Webserver' TRAVERSE :HostedSoftware:Host:Host</where>
        <order-by>os_type</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.SWApacheVirtualVsReal" default="pie">
        <title>Servers running Apache: Virtual vs. Physical</title>
        <description>
            Which Apache Webserver Servers are virtual and which are not in the environment
        </description>
        <split>booleanLabels(virtual, "Virtual", "Not Virtual", "Not Virtual")</split>
        <kind>SoftwareInstance</kind>
        <where>type='Apache Webserver' TRAVERSE :HostedSoftware:Host:Host</where>
        <order-by>virtual</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

<!--
############################
#### HRD Chart Channels ####
############################ -->

    <chart-channel name="Channel.HRDBtuPerU" default="pie">
        <title>Host BTU/h per U size</title>
        <description>
            The BTU per hour per U size ratio of Discovered hosts
        </description>
        <split>(bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h_ru, [500,1000,1500], ['below 500 BTU/h','500-1000 BTU/h','1000-1500 BTU/h','above 1500 BTU/h']) or 'No Data') AS 'BTU/h per U size'</split>
        <kind>Host</kind>
        <where>NOT virtual</where>
        <order-by>#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h_ru</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h_ru OR 'No Data') AS 'Detailed BTU/h per U size',
            (bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.btu_h_ru, [500,1000,1500], ['below 500 BTU/h','500-1000 BTU/h','1000-1500 BTU/h','above 1500 BTU/h']) or 'No Data') AS 'BTU/h per U size',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.HRDWattsPerU" default="pie">
        <title>Host Watts per U size</title>
        <description>
            The Watts per U size ratio of Discovered hosts
        </description>
        <split>(bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.watts_ru, [150,500,1000], ['below 150 Watts','150-500 Watts','500-1000 Watts','above 1000 Watts']) or 'No Data') AS 'Watts per U size'</split>
        <kind>Host</kind>
        <where>NOT virtual</where>
        <order-by>#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.watts_ru</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.watts_ru OR 'No Data') AS 'Watts per U size',
            (bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.watts_ru, [150,500,1000], ['below 150 Watts','150-500 Watts','500-1000 Watts','above 1000 Watts']) or 'No Data') AS 'Watts per U size',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-multi-channel name="Channel.HWCpupowerWatts">
        <title>Host Compute Power and Watts</title>
        <description>
            Speed x number of CPUs vs Watts in the estate.
        </description>
        <split>
            (bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts,
                 [          300,         500,       1000,     10000],
                 ['below 300 W', '300-500 W', '0.5-1 kW', '1-10 kW','above 10 kW']) or 'No Data') AS 'Watts'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [2020, 8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>Host</kind>
        <where>
                NOT virtual
            AND processor_speed IS DEFINED
        </where>
        <order-by>
            #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts,
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts OR 'No Data') AS 'Watts',
            (bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.power_watts, [300,500,1000,10000], ['below 300 W','300-500 W','0.5-1 kW','1-10 kW','above 10 kW']) or 'No Data') AS 'Binned Watts',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-multi-channel name="Channel.HWCpupowerU">
        <title>Host Compute Power and U size</title>
        <description>
            Speed x number of CPUs vs U size in the estate.
        </description>
        <split>
            (bin(#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size,
                 [                 1,     2,       4,       8,       16],
                 ['smaller than 1 U', '1 U', '2-4 U', '4-8 U', '8-16 U', 'larger than 16 U']) or 'No Data') AS 'U Size'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [           2020,             8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>Host</kind>
        <where>
                NOT virtual
            AND processor_speed IS DEFINED
        </where>
        <order-by>
            #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (bin((#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size), [1,2,4,8,16],['smaller than 1 U','1 U','2-4 U','4-8 U','8-16 U','larger than 16 U']) or 'No Data') AS 'U Size',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <chart-channel name="Channel.HRDCPUpowerU" default="pie">
        <title>Host Compute Power per U</title>
        <description>
            Speed x number of CPUs per U size in the estate
        </description>
        <split>bin((processor_speed * defaultNumber((num_logical_processors OR num_processors), 1)/#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size), [500,1000,3000,6000,12000], ['below 500 MHz','0.5-1 GHz','1-3 GHz','3-6 GHz','6-12 GHz','above 12 GHz' ])as "GHz of Compute per U"</split>
        <kind>Host</kind>
        <where>
                NOT virtual
            AND processor_speed IS DEFINED
            AND #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size
        </where>
        <order-by>
            processor_speed * defaultNumber((num_logical_processors OR num_processors), 1) / #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size DESC
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            bin((processor_speed * defaultNumber((num_logical_processors OR num_processors), 1)/#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.u_size), [500,1000,3000,6000,12000], ['below 500 MHz','0.5-1 GHz','1-3 GHz','3-6 GHz','6-12 GHz','above 12 GHz' ])as "GHz of Compute per U",
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.HRDRAMGap" default="pie">
        <title>Host with RAM Gap</title>
        <description>
            Hosts that have less than the maximum RAM installed
        </description>
        <split>
            bin((#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram ) / 1024,
                [               1,      2,        4,        8,        16,         32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'Gb Below Max Ram'
        </split>
        <kind>Host</kind>
        <where>
                NOT Virtual
            AND #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram
            AND ram
            AND #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram &gt; 0
        </where>
        <order-by>#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram</order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            bin((#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram )/1024, [1, 2, 4, 8, 16, 32], ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'Gb Below Max Ram',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-multi-channel name="Channel.HWCpupowerRamGap">
        <title>VM Servers with RAM Gap</title>
        <description>
            Hosts supporting virtual machines that have less than the maximum RAM installed
        </description>
        <split>
            bin((#Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram) / 1024,
                [               1,      2,        4,        8,        16,         32],
                ['Less than 1 Gb', '1 Gb', '2-4 Gb', '4-8 Gb', '8-16 Gb', '16-32 Gb', '32 Gb and more']) AS 'Gb Below Max Ram'
        </split>
        <split>
            bin(processor_speed * defaultNumber((num_logical_processors OR num_processors), 1),
                [           2020,             8000],
                ['Small Compute', 'Medium Compute', 'Large Compute']) AS 'Compute Power'
        </split>
        <kind>SoftwareInstance</kind>
        <where>
            vm_type
            TRAVERSE RunningSoftware:HostedSoftware:Host:Host
               WHERE NOT virtual
                 AND processor_speed IS DEFINED
                 AND #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram
                 AND ram
                 AND #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram > 0
        </where>
        <order-by>
            #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram - ram
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            ram/1024 AS 'Gb Ram',
            #Hardware:ReferenceData:ReferenceData:HardwareReferenceData.max_ram/1024 AS 'Gb Max Ram',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (num_logical_processors OR 'Not Discovered') AS 'Logical CPU',
            (processor_speed OR 'Not Discovered') AS 'CPU MHz',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-multi-channel>

    <!--
###############################
#### EOL Software Channels ####
###############################-->

    <chart-channel name="Channel.EOLSISummary" default="pie">
        <title>Software By End of Life Date</title>
        <description>
            Software Instances categorised by their End of Life date
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
              AND
              bin(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date - currentTime(),
                  [         0,   182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>SoftwareInstance</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date,
            type,
            product_version
        </order-by>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOSSISummary" default="pie">
        <title>Software By End of Support Date</title>
        <description>
            Software Instances categorised by their End of Support date
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
              AND
              bin(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date - currentTime(),
                  [         0,   182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>SoftwareInstance</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date,
            type,
            product_version
        </order-by>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOESSISummary" default="pie">
        <title>Software By End of Extended Support Date</title>
        <description>
            Software Instances categorised by their End of Extended Support date
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
              AND
              bin(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date - currentTime(),
                  [         0,   182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>SoftwareInstance</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date,
            type,
            product_version
        </order-by>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <!--
#########################
#### EOL OS Channels ####
#########################-->

    <chart-channel name="Channel.EOLOSSummary" default="pie">
        <title>Hosts By OS End of Life Date</title>
        <description>
            Hosts categorised by the End of Life date of their Operating System
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
              AND
              bin(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date - currentTime(),
                  [        0,    182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>Host</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date,
            os_type,
            os_version
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOSOSSummary" default="pie">
        <title>Hosts By OS End of Support Date</title>
        <description>
            Hosts categorised by the End of Support date of their Operating System
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date
              AND
              bin(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date - currentTime(),
                  [         0,   182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>Host</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOESOSSummary" default="pie">
        <title>Hosts By OS End of Extended Support Date</title>
        <description>
            Hosts categorised by the End of Extended Support date of their Operating System
        </description>
        <split>
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date
              AND
              bin(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date - currentTime(),
                  [         0,   182 * 864000000000, 365 * 864000000000, 2 * 365 * 864000000000],
                  ['Exceeded', 'Less than 6 months',    '0.5 - 1 years',          '1 - 2 years', '2 or more years'])) OR 'No Data')
        </split>
        <kind>Host</kind>
        <order-by>
            #ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date
        </order-by>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

<!--
####################################
#### Lifecycle Summary Channels ####
####################################-->

    <chart-channel name="Channel.EOLLifecycleOS" default="pie">
        <title>Product Lifecycle Risk - OS</title>
        <description>
            OS Product Lifecycle Risk Summary
        </description>
        <kind>Host</kind>
        <order-by>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime())
                        AND 'EOL Exceeded'))
                  )
                  OR
                    (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                      AND 'EOL less than 6 months away'))
                )
                OR
                  (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                   AND 'EOL more than 6 months away')
              )
              OR
                'No Data'
            )
        </order-by>
        <split>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date
                       AND ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date &lt; currentTime())
                            AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </split>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                      (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                       AND
                       ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime())
                        AND 'EOL Exceeded'))
                  )
                  OR
                    (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                      AND 'EOL less than 6 months away'))
                )
                OR
                  (#ElementWithDetail:SupportDetail:OSDetail:SupportDetail.retirement_date
                   AND 'EOL more than 6 months away')
              )
              OR
                'No Data'
            ) AS 'Lifecycle Risk',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOLLifecycleSoftware" default="pie">
        <title>Product Lifecycle Risk - Software</title>
        <description>
            Software Product Lifecycle Risk Summary
        </description>
        <kind>SoftwareInstance</kind>
        <order-by>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                      AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </order-by>
        <split>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </split>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                        AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            ) AS 'Lifecycle Risk',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOLLifecycleOracleRDBMS" default="pie">
        <title>Product Lifecycle Risk - Oracle Database</title>
        <description>
            Oracle Database Software Product Lifecycle Risk Summary
        </description>
        <kind>SoftwareInstance</kind>
        <where>WHERE type='Oracle Database Server'</where>
        <order-by>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                       AND ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                            AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </order-by>
        <split>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </split>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            ) AS 'Lifecycle Risk',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <chart-channel name="Channel.EOLLifecycleRDBMS" default="pie">
        <title>Product Lifecycle Risk - Databases</title>
        <description>
            Database Software Product Lifecycle Risk Summary
        </description>
        <kind>Pattern</kind>
        <where>
            'Relational Database Management Systems' IN categories
            TRAVERSE Pattern:Maintainer:Element:SoftwareInstance
        </where>
        <order-by>
            #ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
        </order-by>
        <split>
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            )
        </split>
        <show>
            type,
            product_version,
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Life',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Support',
            ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date AND formatTime(#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date, '%Y-%m-%d')) OR 'No Data') AS 'End of Ext Support',
            (
              (
                (
                  (
                    (
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_ext_support_date &lt; currentTime())
                        AND 'EOES Exceeded'))
                      OR
                      (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date
                       AND
                       ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.end_support_date &lt; currentTime())
                        AND 'EOS Exceeded'))
                    )
                    OR
                    (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                     AND
                     ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime())
                      AND 'EOL Exceeded'))
                  )
                  OR
                  (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                   AND
                   ((#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date &lt; currentTime() + 182 * 864000000000)
                    AND 'EOL less than 6 months away'))
                )
                OR
                (#ElementWithDetail:SupportDetail:SoftwareDetail:SupportDetail.retirement_date
                 AND 'EOL more than 6 months away')
              )
              OR
              'No Data'
            ) AS 'Lifecycle Risk',
            #:HostedSoftware:Host:Host.name,
            join((#:HostedSoftware:Host:Host.#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner'
        </show>
    </chart-channel>

    <!--
      #############################
      #### Discovery Dashboard ####
      #############################-->

    <chart-channel name="Channel.DiscoCurrentWindowsAccess" default="pie">
        <title>Current Windows Access</title>
        <description>
            Current Access of Windows Endpoints. This includes endpoints that did not update Host nodes.
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
            _last_marker
            AND (endtime &gt; ( currentTime() - ( (getOption('DA_SUCCESS_TIMEOUT') OR 2419200) * 10000000) ) )
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class = 'Windows'
        </where>
        <order-by>discovery_starttime</order-by>
        <split>
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access'
        </split>
        <show>
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT (TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </chart-channel>

    <chart-channel name="Channel.DiscoCurrentUnixAccess" default="pie">
        <title>Current UNIX Access</title>
        <description>
            Current Access of UNIX Endpoints. This includes endpoints that did not update Host nodes.
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
            _last_marker
            AND (endtime &gt; ( currentTime() - ( (getOption('DA_SUCCESS_TIMEOUT') OR 2419200) * 10000000) ) )
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class = 'UNIX'
        </where>
        <order-by>discovery_starttime</order-by>
        <split>
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access'
        </split>
        <show>
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT (TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </chart-channel>

    <chart-channel name="Channel.DiscoCurrentOverallAccess" default="pie">
        <title>Current Overall Access</title>
        <description>
            Current Access of UNIX and Windows Endpoints. This includes endpoints that did not update Host nodes.
        </description>
        <kind>DiscoveryAccess</kind>
        <where>
            _last_marker
            AND (endtime &gt; ( currentTime() - ( (getOption('DA_SUCCESS_TIMEOUT') OR 2419200)* 10000000) ) )
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class in ['UNIX', 'Windows']
        </where>
        <order-by>discovery_starttime</order-by>
        <split>
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access'
        </split>
        <show>
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (NODECOUNT (TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host WHERE NOT destroyed(#) ) &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult WHERE not provider) &gt; 0) AS 'Session Results Logged'
        </show>
    </chart-channel>

    <chart-channel name="Channel.DiscoRadar" default="pie">
        <title>Discovery Radar</title>
        <description>
            Shows the condition of the last access to all endpoints believed to be Host Devices.
        </description>
        <kind>DiscoveryAccess</kind>
        <with>
            abs(NODECOUNT(TRAVERSE DiscoveryAccess:Metadata:Detail:SessionResult
                          WHERE not provider)) AS sr,
            abs(NODECOUNT(TRAVERSE DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo
                          TRAVERSE FLAGS(include_destroyed) Primary:Inference:InferredElement:Host
                          WHERE NOT destroyed(#))) AS hu,
            abs(NODECOUNT(TRAVERSE FLAGS(include_destroyed) ::InferredElement:Host)) AS hr
        </with>
        <where>
            _last_marker
            AND (endtime &gt; ( currentTime() - ( (getOption('DA_SUCCESS_TIMEOUT') OR 2419200) * 10000000) ) )
            AND #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.kind = 'Host'
        </where>
        <split>
            (
              ( ( (@hu > 0) AND (@hr > 0) AND (@sr = 0) ) AND 'Update [Normal]' ) OR
              ( ( (@hu > 0) AND (@hr > 0) AND (@sr > 0) ) AND 'Update [Credential Search]' ) OR
              ( ( (@hu = 0) AND (@hr > 0) AND (@sr > 0) ) AND 'Access Regression [Credential Failure]' ) OR
              ( ( (@hu = 0) AND (@hr > 0) AND (@sr = 0) ) AND 'Access Regression [Other Failure]' ) OR
              ( ( (@hu = 0) AND (@hr = 0) AND (@sr > 0) ) AND 'Unknown Host [Credential Failure]' ) OR
              ( ( (@hu = 0) AND (@hr = 0) AND (@sr = 0) ) AND 'Unknown Host [No Credential Available]' )
            )
        </split>
        <show>
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_class AS 'Discovered OS Class',
            whenWasThat(discovery_starttime) AS 'When',
            (
              (
                (
                  (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method = 'rcmd')
                  AND
                  #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_slave
                )
                OR
                (#DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.probed_os AND 'Probe')
              )
              OR
              #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.last_access_method
            ) AS 'Current Access',
            endpoint,
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.hostname AS 'Hostname',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os AS 'Discovered OS',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_type AS 'OS Type',
            #DiscoveryAccess:DiscoveryAccessResult:DiscoveryResult:DeviceInfo.os_version AS 'OS Version',
            (@hu &gt; 0) AS 'Host Node Updated',
            (reason OR '') AS 'Reason not updated',
            (@sr &gt; 0) AS 'Session Results Logged'
        </show>
    </chart-channel>

    <time-series-channel name="Channel.DiscoHostOSClassOverTime" time-series="7">
        <title>Host count by OS Class</title>
        <description>
            Evolution of the number of discovered hosts over time split by OS class
        </description>
        <kind>Host</kind>
        <split>os_class</split>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </time-series-channel>

    <chart-channel name="Channel.DiscoLastSuccessfulUpdate" default="column">
        <title>Host Last Successful Update</title>
        <description>Shows a summary of the last update to Hosts to help understand the freshness of the data</description>
        <kind>Host</kind>
        <order-by>last_update_success DESC</order-by>
        <split>whenWasThat(last_update_success) AS 'Last Successful Update'</split>
        <show>
            summary,
            whenWasThat(last_update_success) AS 'Last Successful Update'
        </show>
    </chart-channel>

<!--     ############################
         #### Baseline Dashboard ####
         ############################-->

    <report name="Baseline.Reports.DetailedHostReport">
        <title>Detailed Host Report</title>
        <description>Shows an extended set of Host properties</description>
        <kind>Host</kind>
        <show>
            name,
            host_type,
            os_class,
            os_type,
            os_version,
            os_edition,
            ((virtual AND 'Virtual') OR 'Not Virtual') AS 'Virtual',
            (vendor OR 'Not Discovered') AS 'Vendor',
            (model OR 'Not Discovered') AS 'Model',
            (ram OR 'Not Discovered') AS 'RAM',
            (num_processors OR 'Not Discovered') AS 'Physical CPU',
            (processor_type OR 'Not Discovered') AS 'CPU Type',
            join((#OwnedItem:Ownership::Person.name OR 'None Linked'), ', ') AS 'Host Owner',
            join((#ElementInLocation:Location:Location:Location.name OR 'None Linked'), ', ') AS 'Location',
            join((#Host:HostedSoftware:AggregateSoftware:BusinessApplicationInstance.name OR 'None Linked'), ', ') AS 'Applications',
            join((#InferredElement:Inference:Associate:DiscoveryAccess.endpoint OR 'DDD Aged Out'), ', ') AS 'Scanned Via'
        </show>
    </report>

    <report-channel name="Reports.Channel.BaselineDashboard">
        <title>Baseline Support</title>
        <description>A collection of reports to support infrastructure baseline activities</description>
        <report>Baseline.Reports.DetailedHostReport</report>
        <report indent="true">Discovery.Report.PossibleHostDevices</report>
        <report indent="true">Discovery.Report.PossibleNonHostDevices</report>
        <report>HRD.Report.PowerCandidates</report>
        <report>HRD.Report.HeatCandidates</report>
        <report>Virtualization.Reports.VirtualToPhysical</report>
        <report>Discovery.Report.SeenButUnscanned</report>
        <report indent="true">Discovery.Report.SeenButUnscannedPort</report>
    </report-channel>

    <!--
    #########################################################################

        AUDIT SEARCHING

    #########################################################################
    -->

    <report name="Audit.Report.SearchLogs">
        <title>Search audit records</title>
        <description>Shows list of audited user actions</description>
        <imports>
            <import>common.timeutil</import>
            <import>api.audit</import>
        </imports>
        <parameters>
            <parameter name="Audit_Report_SearchLogs_from">
                <title>From</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                    <default>
                        common.timeutil.convertToUnix(common.timeutil.currentTime() -
                                                      (24 * common.timeutil.ONE_HOUR))
                    </default>
                </type>
                <key>from</key>
            </parameter>
            <parameter name="Audit_Report_SearchLogs_to">
                <title>To</title>
                <type name="DateTimeField">
                    <convert>common.timeutil.convertFromUnix</convert>
                </type>
                <key>to</key>
            </parameter>
            <parameter name="Audit_Report_SearchLogs_userid">
                <title>User ID</title>
                <type name="TextField">
                    <escape>False</escape>
                </type>
                <key>name</key>
            </parameter>
            <parameter name="Audit_Report_SearchLogs_eventGroup">
                <title>Event group</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                      <eval>api.audit.getEventGroups()</eval>
                    </options>
                </type>
                <key>eventGroup</key>
            </parameter>
            <parameter name="Audit_Report_SearchLogs_events">
                <title>Events</title>
                <type name="SelectField">
                    <escape>False</escape>
                    <options>
                      <eval>api.audit.getEvents()</eval>
                    </options>
                </type>
                <key>event</key>
            </parameter>
        </parameters>
    </report>

  <!--
    #########################################################################

        FileSystem reports

    #########################################################################
    -->

    <report name="Infrastructure.Report.FileSystemsFull">
        <title>Full File Systems</title>
        <description>Shows Hosts with very full File Systems</description>
        <kind>FileSystem</kind>
        <where>
            fs_kind = 'LOCAL' and
            free_percentage &lt; 10 and
            size is defined and
            fs_type not in [ 'tmpfs', 'none', 'devfs' ]
        </where>
        <order-by> #MountedFileSystem:FileSystemMount:Mounter:Host.name, fs_name</order-by>
        <show>
  #MountedFileSystem:FileSystemMount:Mounter:Host.name,
  fs_name,
  friendlySize(size * 1024) AS "Size",
  friendlySize(used * 1024) AS "Used",
  friendlySize(free * 1024) AS "Free",
  str(free_percentage) + "%" AS "Free Percentage"
        </show>
    </report>

    <report name="Infrastructure.Report.FileSystemsEmpty">
        <title>Free Space</title>
        <description>Shows Hosts with File Systems which have a lot of free space</description>
        <kind>FileSystem</kind>
        <where>
            fs_kind = 'LOCAL' and
            free_percentage &gt; 90 and
            size is defined and
            fs_type not in [ 'tmpfs', 'none', 'devfs' ]
        </where>
        <order-by> #MountedFileSystem:FileSystemMount:Mounter:Host.name, fs_name</order-by>
        <show>
  #MountedFileSystem:FileSystemMount:Mounter:Host.name,
  fs_name,
  friendlySize(size * 1024) AS "Size",
  friendlySize(used * 1024) AS "Used",
  friendlySize(free * 1024) AS "Free",
  str(free_percentage) + "%" AS "Free Percentage"
        </show>
    </report>

    <!-- ################ REPORT CHANNEL ############## -->

    <report-channel name="Reports.Channel.FileSystems">
        <title>File System Reports</title>
        <description>FileSystem related reports</description>
        <report>Infrastructure.Report.FileSystemsFull</report>
        <report>Infrastructure.Report.FileSystemsEmpty</report>
    </report-channel>

<!--
    #########################################################################

        MAINFRAME

    #########################################################################
    -->

    <report name="MF.Report.Mainframes">
        <title>All Mainframes</title>
        <description>Shows All mainframes</description>
        <kind>Mainframe</kind>
        <where></where>
        <order-by>name</order-by>
        <show>
            name, description, model, num_processors,
            nodecount(TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart) as "Native LPARs",
            nodecount(TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart
                      TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart) as "Guest LPARs",
            nodecount(TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart
                      EXPAND   Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      EXPAND   HostContainer:HostContainment:ContainedHost:MFPart
                      TRAVERSE ContainedHost:HostContainment:HostContainer:Cluster WHERE type="Sysplex") as "Sysplexes",
            nodecount(TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart
                      EXPAND   Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      EXPAND   HostContainer:HostContainment:ContainedHost:MFPart
                      TRAVERSE Host:CouplingFacility:CouplingFacility:CouplingFacility ) as "Coupling Facilities",
            nodecount(TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart
                      EXPAND   Host:HostedSoftware:RunningSoftware:SoftwareInstance
                      EXPAND   HostContainer:HostContainment:ContainedHost:MFPart
                      TRAVERSE Host:Storage:Storage:StorageCollection ) as "Storage SubSystems"
        </show>
    </report>

    <report name="MF.Report.LPARonMainframe">
        <title>All Mainframe LPARs</title>
        <description>Shows All mainframe LPARs</description>
        <kind>MFPart</kind>
        <where></where>
        <order-by>name</order-by>
        <show>
            name as "LPAR",
            part_type,
            os,
            os_type,
            os_version,
            (os_serial or '') AS 'System Name',
            (#ContainedHost:HostContainment:HostContainer:Cluster.name or '') AS "Sysplex",
            (#ContainedHost:HostContainment:HostContainer:Mainframe.name or
             #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.#ContainedHost:HostContainment:HostContainer:Mainframe.name) AS "Mainframe"
        </show>
    </report>

    <report name="MF.Report.LPARonMainframedrop">
        <title>All LPARs on a specific Mainframe</title>
        <description>Shows list of All LPARS on a specific Mainframe by dropdown. This uses a drop down of all Mainframes discovered</description>
        <kind>Mainframe</kind>
        <where>name=%(opt_name)s TRAVERSE HostContainer:HostContainment:ContainedHost:MFPart</where>
        <order-by>name</order-by>
        <show>
            name as "LPAR",
            part_type,
            os,
            os_type,
            os_version,
            (os_serial or '') AS 'System Name',
            (#ContainedHost:HostContainment:HostContainer:Cluster.name or '') AS "Sysplex",
            (#ContainedHost:HostContainment:HostContainer:Mainframe.name or
             #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.#ContainedHost:HostContainment:HostContainer:Mainframe.name) AS "Mainframe"
        </show>
        <parameters>
            <parameter name="DCO_Report_SoftwareOnLPAR">
                <title>Mainframe Search</title>
                <type name="SelectField">
                    <all>false</all>
                    <options>
                        <query>SEARCH Mainframe SHOW name PROCESS WITH unique(1)</query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="MF.Report.SoftwareOnLPARs">
        <title>Software on all LPARs</title>
        <description>Shows All All Software on all LPARs</description>
        <kind>MFPart TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance</kind>
        <where></where>
        <order-by>#RunningSoftware:HostedSoftware:Host:MFPart.name</order-by>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </report>

    <report name="MF.Report.SoftwareOnLPARdrop">
        <title>All Software on a specific LPAR</title>
        <description>Shows list of All Software on a specific LPAR by dropdown. This uses a drop down of all LPARs discovered</description>
        <kind>MFPart</kind>
        <where>
            name=%(opt_name)s TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance
        </where>
        <order-by>#RunningSoftware:HostedSoftware:Host:MFPart.name</order-by>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
        <parameters>
            <parameter name="DCO_Report_SoftwareOnLPAR">
                <title>LPAR Search</title>
                <type name="SelectField">
                    <all>false</all>
                    <options>
                        <query>SEARCH MFPart where model="LPAR" SHOW name PROCESS WITH unique(1)</query>
                    </options>
                    <validate>NotEmpty</validate>
                </type>
                <key>opt_name</key>
            </parameter>
        </parameters>
    </report>

    <report name="MF.Report.TransactionServers">
        <title>Mainframe Transaction Servers</title>
        <description>Shows Mainframe Transaction Servers</description>
        <kind>SoftwareInstance</kind>
        <where>type IN ["IBM CICS", "IBM IMS Transaction Manager"]</where>
        <order-by>instance</order-by>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </report>

    <report name="MF.Report.DetailedCICS">
        <title>Detailed CICS Transactions</title>
        <description>Shows Detailed CICS info</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM CICS" traverse ElementWithDetail:Detail:Detail:Detail where type="CICSTRAN"</where>
        <order-by>instance</order-by>
        <show>
            explode #Detail:Detail:ElementWithDetail:SoftwareInstance.name AS "CICS Server",
            name AS "Transaction Name",
            instance
        </show>
    </report>

    <report name="MF.Report.DetailedIMS">
        <title>Detailed IMS Transactions</title>
        <description>Shows Detailed IMS info</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM IMS Transaction Manager" traverse ElementWithDetail:Detail:Detail:Detail where type="IMSTRAN"</where>
        <order-by>instance</order-by>
        <show>
            explode #Detail:Detail:ElementWithDetail:SoftwareInstance.name AS "IMS Server",
            name AS "Transaction Name",
            instance
        </show>
    </report>

    <report name="MF.Report.DatabaseServers">
        <title>Mainframe Database Servers</title>
        <description>Shows Mainframe Database Servers</description>
        <kind>SoftwareInstance</kind>
        <where>type IN ["IBM DB2 Database Server", "IBM IMS", "IBM IMS Database Control"]</where>
        <order-by>instance</order-by>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </report>

    <report name="MF.Report.IMSdatabases">
        <title>Databases in IMS</title>
        <description>Shows Databases in IMS</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM DB2 Database Server" traverse ElementWithDetail:Detail:Detail:DatabaseDetail where type="IMSAREA"</where>
        <order-by>instance</order-by>
        <show>
            explode #Detail:Detail:ElementWithDetail:SoftwareInstance.name AS "IMS Server",
            name AS "Database Name",
            detail_type,
            instance
        </show>
    </report>

    <report name="MF.Report.DB2databases">
        <title>Databases in DB2</title>
        <description>Shows Databases in DB2</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM DB2 Database Server" traverse ElementWithDetail:Detail:Detail:DatabaseDetail where type="DB2DB"</where>
        <order-by>instance</order-by>
        <show>
            explode #Detail:Detail:ElementWithDetail:SoftwareInstance.name AS "DB2 Server",
            name AS "Database Name",
            instance
        </show>
    </report>

    <report name="MF.Report.db2details">
        <title>DB2 Details per Database</title>
        <description>Shows DB2 indexes, tablespaces, pagesets per Database</description>
        <kind>DatabaseDetail</kind>
        <where>type="DB2DB" TRAVERSE Container:Containment:Contained:DatabaseDetail</where>
        <order-by>#Contained:Containment:Container:DatabaseDetail.name, type</order-by>
        <show>
            explode #Contained:Containment:Container:DatabaseDetail.name AS "DB2 Database",
            type,
            name,
            instance
        </show>
    </report>

    <report name="MF.Report.MQQMgr">
        <title>MQ Queue Managers</title>
        <description>Shows MQ Queue Managers</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM WebSphere MQ"</where>
        <order-by>instance</order-by>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </report>    
    
    <report name="MF.Report.MQDetails">
        <title>MQ Details</title>
        <description>Shows MQ channels, listners, queues</description>
        <kind>SoftwareInstance</kind>
        <where>type="IBM WebSphere MQ" TRAVERSE ElementWithDetail:Detail:Detail:Detail</where>
        <order-by>instance</order-by>
        <show>
            explode #Detail:Detail:ElementWithDetail:SoftwareInstance.name AS "MQ Queue Manager",
            name AS "MQ Detail Name",
            type,
            instance AS "MQ Detail Instance",
            detail_type
        </show>
    </report>

    <report name="MF.Report.WebsphereLPAR">
        <title>Websphere</title>
        <description>Shows Websphere</description>
        <kind>SoftwareInstance</kind>
        <where>type IN ["IBM WebSphere Applications", "IBM WebSphere Node Agent", "IBM WebSphere Deployment Manager", "IBM WebSphere Application Server"]</where>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </report>

    <report name="MF.Report.StorageSubsystems">
        <title>Storage Subsystems</title>
        <description>Shows Storage Subsystems</description>
        <kind>StorageCollection</kind>
        <where>type IN ["DASDSubsystem","TapeSubsystem"]</where>
        <show>
            name,
            vendor,
            #Storage:Storage:Host:MFPart.name AS "Used By LPAR"
        </show>
    </report>

    <report name="MF.Report.Storage">
        <title>Storage Volumes</title>
        <description>Shows Storage Volumes</description>
        <kind>MFPart</kind>
        <where>TRAVERSE Host:Storage:Storage:Storage</where>
        <order-by></order-by>
        <show>
            name,
            type,
            model,
            vendor,
            volume_id,
            device_id,
            #ContainedStorage:StorageContainment:StorageContainer:StorageCollection.name AS "Storage SubSystem",
            #Storage:Storage:Host:MFPart.name AS "LPAR Dependency"
        </show>
    </report>

    <report name="MF.Report.Coupling">
        <title>CouplingFacility</title>
        <description>Shows CouplingFacility</description>
        <kind>CouplingFacility</kind>
        <show>
            #CouplingFacility:HostContainment:HostContainer:Cluster.name AS "Sysplex",
            storage,
            cfrm_name,
            #CouplingFacility:CouplingFacility:Host:MFPart.name AS "LPAR"
        </show>
    </report>

    <report name="MF.Report.LPARtoLPAR">
        <title>Virtual LPAR to Native LPAR map</title>
        <description>Shows Virtual LPAR to Native LPAR map</description>
        <kind>MFPart</kind>
        <where>virtual</where>
        <show>
            name AS "Virtual LPAR name", part_type AS "Virtual LPAR type", vm_id AS "Virtual LPAR ID", os AS "Virtual LPAR OS",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.type AS "Container Type",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.version  AS "Container Version",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.name AS "Native LPAR name",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.part_type AS "Native LPAR type",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.os AS "Native LPAR os",
            #ContainedHost:HostContainment:HostContainer:SoftwareInstance.#RunningSoftware:HostedSoftware:Host:MFPart.#ContainedHost:HostContainment:HostContainer:Mainframe.name AS "Mainframe name"
        </show>
    </report>

    <report name="MF.Report.Sysplex">
        <title>Sysplexes</title>
        <description>Shows Sysplex clusters</description>
        <kind>Cluster</kind>
        <where>type="Sysplex"</where>
        <show>
            description,
            type,
            id,
            #HostContainer:HostContainment:ContainedHost:MFPart.name as "LPAR",
            (#HostContainer:HostContainment:CouplingFacility:CouplingFacility.name or '') as 'Coupling Facility'
        </show>
    </report>

    <report-channel name="Reports.Channel.MainframeInfra">
        <title>Mainframe Infrastructure Reports</title>
        <description>Mainframe infrastructure reports</description>
        <report>MF.Report.Mainframes</report>
        <report>MF.Report.Sysplex</report>
        <report>MF.Report.LPARonMainframe</report>
        <report indent="true">MF.Report.LPARonMainframedrop</report>
        <report indent="true">MF.Report.LPARtoLPAR</report>
        <report>MF.Report.StorageSubsystems</report>
        <report indent="true">MF.Report.Storage</report>
        <report>MF.Report.Coupling</report>
    </report-channel>

    <report-channel name="Reports.Channel.MainframeSoft">
        <title>Mainframe Software Reports</title>
        <description>Mainframe software reports</description>
        <report>MF.Report.SoftwareOnLPARs</report>
        <report indent="true">MF.Report.SoftwareOnLPARdrop</report>
        <report>MF.Report.TransactionServers</report>
        <report indent="true">MF.Report.DetailedCICS</report>
        <report indent="true">MF.Report.DetailedIMS</report>
        <report>MF.Report.DatabaseServers</report>
        <report indent="true">MF.Report.IMSdatabases</report>
        <report indent="true">MF.Report.DB2databases</report>
        <report indent="true">MF.Report.db2details</report>
        <report>MF.Report.MQQMgr</report>
        <report indent="true">MF.Report.MQDetails</report>
        <report>MF.Report.WebsphereLPAR</report>
    </report-channel>

    <summary-channel name="Infrastructure.Channel.MfSummary">
        <title>Mainframe Infrastructure Summary</title>
        <description>_|Shows a summary of mainframe infrastructure items|_</description>
        <image>infrastructure</image>
        <kind-count>Mainframe</kind-count>
        <kind-count>MFPart</kind-count>
        <kind-count>CouplingFacility</kind-count>
        <kind-count>StorageCollection</kind-count>
    </summary-channel>

    <chart-multi-channel name="Channel.MfParts" default="column_nolegend">
        <title>Mainframe Parts</title>
        <description>
            Type and OS version of all Mainframe Part instances.
        </description>
        <split>(part_type or 'Unknown') AS 'Type'</split>
        <split>(os or 'Unknown') AS 'OS'</split>
        <kind>MFPart</kind>
        <order-by>
            part_type,
            os
        </order-by>
        <show>
            name,
            (os_serial or '') AS 'System Name',
            os_type,
            os_version,
            model,
            #ContainedHost:HostContainment:HostContainer:Cluster.name AS 'Sysplex',
            #ContainedHost:HostContainment:HostContainer:Mainframe.name AS 'Mainframe'
        </show>
    </chart-multi-channel>

    <chart-channel name="Channel.MF.SoftwareType" default="pie">
        <title>Mainframe Software Products By Type</title>
        <description>Shows a list of the Mainframe Software by Type</description>
        <split>(software_type or 'Unknown') AS 'Software Type'</split>
        <kind>MFPart</kind>
        <!-- need to exclude the VM SIs -->
        <where keyword="False">TRAVERSE Host:HostedSoftware:RunningSoftware:SoftwareInstance WHERE NOT vm_type</where>
        <show>
            name,
            type,
            version,
            job_id,
            server_id,
            #RunningSoftware:HostedSoftware:Host:MFPart.name AS 'LPAR'
        </show>
    </chart-channel>

    <chart-channel name="Channel.MF.StorageVendor" default="pie">
        <title>Mainframe Storage Volumes By Vendor</title>
        <description>Shows a list of the Mainframe Storage Volumes by Vendor</description>
        <split>(vendor or 'Unknown') AS 'Storage Vendor'</split>
        <kind>MFPart</kind>
        <where keyword="False">TRAVERSE Host:Storage:Storage:Storage</where>
        <show>
            name,
            type,
            model,
            vendor,
            volume_id,
            device_id,
            #ContainedStorage:StorageContainment:StorageContainer:StorageCollection.name AS "Storage SubSystem",
            #Storage:Storage:Host:MFPart.name AS "LPAR Dependency"
        </show>
    </chart-channel>

    <chart-channel name="Channel.MF.StorageSubsystemVendor" default="pie">
        <title>Mainframe Storage Subsystem By Vendor</title>
        <description>Shows a list of the Mainframe Storage Subsystems by Vendor</description>
        <split>(vendor or 'Unknown') AS 'Storage Vendor'</split>
        <kind>MFPart</kind>
        <where keyword="False">TRAVERSE Host:Storage:Storage:StorageCollection</where>
        <show>
            name,
            type,
            vendor,
            #Storage:Storage:Host:MFPart.name AS "LPAR Dependency"
        </show>
    </chart-channel>

  <!--
    #########################################################################

        VIDEOS

    #########################################################################
    -->

    <video-channel name="Channel.Video.HostProfile">
        <title>New Feature Tutorial: Host Profile</title>
        <description>Video tutorial that explains the Host Profile feature</description>
        <src>/videos/Host_Profiles.swf</src>
    </video-channel>

    <video-channel name="Channel.Video.AutomaticGrouping">
        <title>New Feature Tutorial: Automatic Grouping</title>
        <description>Video tutorial that explains the Automatic Grouping feature</description>
        <src>/videos/Automatic_Grouping.swf</src>
    </video-channel>

    <video-channel name="Channel.Video.HighlyConnected">
        <title>Highly Connected Group Overview</title>
        <description>Video tutorial that explains highly connected groups</description>
        <src>/videos/Highly_Connected_Hosts.swf</src>
    </video-channel>

<!-- External reference
    <video-channel name="Channel.Video.Demo">
        <title>Demo Video</title>
        <description>Demo Video Channel</description>
        <src>http://www.youtube.com/v/QT2VaUM97y8</src>
    </video-channel>
-->

  <!--
  #########################################################################

        Web feeds

  #########################################################################
  -->

    <web-channel name="Channel.Web.Community">
        <title>Community Update</title>
        <description>Shows the community update</description>
        <!-- Version and Edition replaced during loading of web channel -->
        <url>http://discovery.bmc.com/widgets/foundation-forum/?version=${RPM_VERSION_UNDERSCORE}&amp;ed=${EDITION}</url>
    </web-channel>

<!--
    EXAMPLES:

    <web-channel name="Channel.Web.Google">
        <title>Google</title>
        <description>Shows the google search engine</description>
        <url>http://www.google.co.uk</url>
    </web-channel>

    <web-channel name="Channel.Web.Yahoo">
        <title>Yahoo</title>
        <description>Shows the yahoo search engine</description>
        <url>http://www.yahoo.co.uk</url>
    </web-channel>
  -->

  <!--
  #########################################################################

        RSS feeds

  #########################################################################
  -->

  <!--
    EXAMPLES:

    <rss-channel name="Channel.RSS.VMware">
        <title>VMWare Feed</title>
        <description>Shows the latest info from VMware</description>
        <url>http://vmware.simplefeed.net/rss/?f=2fe7e950-01de-11de-3b40-003048605010</url>
    </rss-channel>

    <rss-channel name="Channel.RSS.Tideway.Configipedia">
        <title>Configipedia Updates</title>
        <description>Shows the latest documentation updates from the Configipedia website</description>
        <url>http://discovery.bmc.com/confluence/createrssfeed.action?types=page&amp;types=blogpost&amp;sort=modified&amp;showContent=true&amp;spaces=Configipedia&amp;labelString=&amp;rssType=rss2&amp;maxResults=15&amp;timeSpan=90&amp;publicFeed=true&amp;title=Configipedia+Updates&amp;showDiff=false</url>
    </rss-channel>
  -->

  <!--
    #########################################################################
    #########################################################################
    #########################################################################

        PAGE SETUP - WHICH CHANNELS GO ON WHICH PAGES

    #########################################################################
    #########################################################################
    #########################################################################
    -->

    <page name="ApplicationHome">
        <channel>Applications.Channel.Summary</channel>
        <channel>Impact.Channel.ApplicationImpact</channel>
        <channel>Applications.Channel.AppMapping</channel>
        <channel>Applications.Channel.AppMappingVideos</channel>
        
    </page>

    <page name="InfrastructureHome">
        <!--These are indented like this so I can see the 2 column flow - leave it alone-->
        <channel>Infrastructure.Channel.Summary</channel>
            <channel builtin="True">Infrastructure.Channel.Explore</channel>
        <channel>Reports.Channel.GeneralVirtualization</channel>
            <channel>Reports.Channel.OperatingSystems</channel>
        <channel>Reports.Channel.VMwareInfrastructure</channel>
            <channel>Infrastructure.Channel.Reports</channel>
        <channel>Reports.Channel.MSHYPERV</channel>
            <channel>Infrastructure.Channel.InstalledSoftware</channel>
        <channel>Reports.Channel.IBMPOWER</channel>
            <channel>Infrastructure.Channel.HostReports</channel>
        <channel>Reports.Channel.SolarisInfrastructure</channel>
            <channel>Infrastructure.Channel.Databases</channel>
        <channel>Reports.Channel.OtherVirtualization</channel>
            <channel>Reports.Channel.FileSystems</channel>
        <channel>Reports.Channel.MainframeInfra</channel>
            <channel>Reports.Channel.MainframeSoft</channel>
    </page>



    <page name="DiscoveryReports">
        <channel>Discovery.Channel.Summary</channel>
        <channel>Discovery.Channel.DiscoveryReportChannel</channel>
        <channel>Infrastructure.Channel.ModelNews</channel>
        <channel>Infrastructure.Channel.ModelHealth</channel>
    </page>

    <page name="Reports">
        <channel>Reports.Channel.OperationalIntegrity</channel>
        <channel>Reports.Channel.FoundationDeployment</channel>
        <channel>Reports.Channel.ChangeControl</channel>
        <channel>DataCentreStand.Channel.DataCentreStandardizationSoftware</channel>
        <channel>Reports.Channel.Software</channel>
        <channel>DataCentreStand.Channel.DataCentreStandardizationReports</channel>
        <channel>DataCentreStand.Channel.DataCentreStandardizationCharts</channel>
        <channel>Resiliency.Channel.HostResiliencyServices</channel>
        <channel>Resiliency.Channel.HostResiliencyPatches</channel>
        <channel>Resiliency.Channel.HostResiliencyKernel</channel>
    </page>

    <!-- SetupHome channels are configured dynamically from the loaded
         modules. Any definition here will be ignored!
      -->
</reports>
